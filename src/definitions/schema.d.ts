import { Context } from './index'
/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql'
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  article?: GQLArticle
  circle?: GQLCircle
  node?: GQLNode
  nodes?: Array<GQLNode>
  frequentSearch?: Array<string>
  search: GQLSearchResultConnection
  official: GQLOfficial
  oss: GQLOSS
  viewer?: GQLUser
  user?: GQLUser
  oauthRequestToken?: string
  exchangeRates?: Array<GQLExchangeRate>
  oauthClient?: GQLOAuthClient
}

export interface GQLArticleInput {
  mediaHash?: string
  shortHash?: string
}

/**
 * This type contains metadata, content, hash and related data of an article. If you
 * want information about article's comments. Please check Comment type.
 */
export interface GQLArticle extends GQLNode, GQLPinnableWork {
  /**
   * Unique ID of this article
   */
  id: string

  /**
   * The number represents how popular is this article.
   */
  topicScore?: number

  /**
   * Slugified article title.
   */
  slug: string

  /**
   * Time of this article was created.
   */
  createdAt: GQLDateTime

  /**
   * Time of this article was revised.
   */
  revisedAt?: GQLDateTime

  /**
   * State of this article.
   */
  state: GQLArticleState

  /**
   * Author of this article.
   */
  author: GQLUser

  /**
   * Article title.
   */
  title: string

  /**
   * Article cover's link.
   */
  cover?: string

  /**
   * List of assets are belonged to this article (Only the author can access currently).
   */
  assets: Array<GQLAsset>

  /**
   * A short summary for this article.
   */
  summary: string

  /**
   * This value determines if the summary is customized or not.
   */
  summaryCustomized: boolean

  /**
   * Tags attached to this article.
   */
  tags?: Array<GQLTag>

  /**
   * Word count of this article.
   */
  wordCount?: number

  /**
   * IPFS hash of this article.
   */
  dataHash: string

  /**
   * Media hash, composed of cid encoding, of this article.
   */
  mediaHash: string

  /**
   * Short hash for shorter url addressing
   */
  shortHash: string

  /**
   * Content (HTML) of this article.
   */
  content: string

  /**
   * Different foramts of content.
   */
  contents: GQLArticleContents

  /**
   * Original language of content
   */
  language?: string

  /**
   * List of articles which added this article into their collections.
   */
  collectedBy: GQLArticleConnection

  /**
   * List of articles added into this article' collection.
   */
  collection: GQLArticleConnection

  /**
   * Related articles to this article.
   */
  relatedArticles: GQLArticleConnection

  /**
   * Donation-related articles to this article.
   */
  relatedDonationArticles: GQLArticleConnection

  /**
   * Appreciations history of this article.
   */
  appreciationsReceived: GQLAppreciationConnection

  /**
   * Total number of appreciations recieved of this article.
   */
  appreciationsReceivedTotal: number

  /**
   * Total number of donation recieved of this article.
   */
  donationCount: number

  /**
   * Total number of readers of this article.
   */
  readerCount: number

  /**
   * Subscribers of this article.
   */
  subscribers: GQLUserConnection

  /**
   * Limit the nuhmber of appreciate per user.
   */
  appreciateLimit: number

  /**
   * Number represents how many times per user can appreciate this article.
   */
  appreciateLeft: number

  /**
   * This value determines if current viewer has appreciated or not.
   */
  hasAppreciate: boolean

  /**
   * This value determines if current viewer can SuperLike or not.
   */
  canSuperLike: boolean

  /**
   * This value determines if current Viewer has subscribed of not.
   */
  subscribed: boolean

  /**
   * This value determines if this article is an author selected article or not.
   * @deprecated Use pinned instead
   */
  sticky: boolean
  pinned: boolean

  /**
   * Translation of article title and content.
   */
  translation?: GQLArticleTranslation

  /**
   * Available translation languages.
   */
  availableTranslations?: Array<GQLUserLanguage>

  /**
   * Transactions history of this article.
   */
  transactionsReceivedBy: GQLUserConnection

  /**
   * Donations of this article, grouped by sender
   */
  donations: GQLArticleDonationConnection

  /**
   * Cumulative reading time in seconds
   */
  readTime: number

  /**
   * Drafts linked to this article.
   * @deprecated Use Article.newestUnpublishedDraft or Article.newestPublishedDraft instead
   */
  drafts?: Array<GQLDraft>

  /**
   * Newest unpublished draft linked to this article.
   */
  newestUnpublishedDraft?: GQLDraft

  /**
   * Newest published draft linked to this article.
   */
  newestPublishedDraft: GQLDraft

  /**
   * Revision Count
   */
  revisionCount: number

  /**
   * Access related fields on circle
   */
  access: GQLArticleAccess

  /**
   * whether content is marked as sensitive by author
   */
  sensitiveByAuthor: boolean

  /**
   * whether content is marked as sensitive by admin
   */
  sensitiveByAdmin: boolean

  /**
   * License Type
   */
  license: GQLArticleLicenseType

  /**
   * creator message asking for support
   */
  requestForDonation?: string

  /**
   * creator message after support
   */
  replyToDonator?: string

  /**
   * the iscnId if published to ISCN
   */
  iscnId?: string

  /**
   * whether readers can comment
   */
  canComment: boolean

  /**
   * history versions
   */
  versions: GQLArticleVersionsConnection
  oss: GQLArticleOSS
  remark?: string

  /**
   * The counting number of comments.
   */
  commentCount: number

  /**
   * The number determines how many pinned comments can be set.
   */
  pinCommentLimit: number

  /**
   * The number determines how many comments can be set as pinned comment.
   */
  pinCommentLeft: number

  /**
   * List of pinned comments.
   */
  pinnedComments?: Array<GQLComment>

  /**
   * List of featured comments of this article.
   */
  featuredComments: GQLCommentConnection

  /**
   * List of comments of this article.
   */
  comments: GQLCommentConnection

  /**
   * The counting number of this article.
   */
  responseCount: number

  /**
   * List of responses of a article.
   */
  responses: GQLResponseConnection
}

export interface GQLNode {
  id: string
}

/** Use this to resolve interface type Node */
export type GQLPossibleNodeTypeNames =
  | 'Article'
  | 'User'
  | 'Circle'
  | 'Comment'
  | 'Tag'
  | 'IcymiTopic'
  | 'Topic'
  | 'Chapter'
  | 'Collection'
  | 'Draft'
  | 'ArticleVersion'
  | 'Report'

export interface GQLNodeNameMap {
  Node: GQLNode
  Article: GQLArticle
  User: GQLUser
  Circle: GQLCircle
  Comment: GQLComment
  Tag: GQLTag
  IcymiTopic: GQLIcymiTopic
  Topic: GQLTopic
  Chapter: GQLChapter
  Collection: GQLCollection
  Draft: GQLDraft
  ArticleVersion: GQLArticleVersion
  Report: GQLReport
}

export interface GQLPinnableWork {
  id: string
  pinned: boolean
  title: string
  cover?: string
}

/** Use this to resolve interface type PinnableWork */
export type GQLPossiblePinnableWorkTypeNames = 'Article' | 'Collection'

export interface GQLPinnableWorkNameMap {
  PinnableWork: GQLPinnableWork
  Article: GQLArticle
  Collection: GQLCollection
}

/**
 * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
 * `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
 * 8601 standard for representation of dates and times using the Gregorian calendar.
 */
export type GQLDateTime = any

/**
 * Enums for an article state.
 */
export const enum GQLArticleState {
  active = 'active',
  archived = 'archived',
  banned = 'banned',
}

export interface GQLUser extends GQLNode {
  /**
   * Circles belong to current user.
   */
  ownCircles?: Array<GQLCircle>

  /**
   * Circles whiches user has subscribed.
   */
  subscribedCircles: GQLCircleConnection
  notices: GQLNoticeConnection

  /**
   * Global id of an user.
   */
  id: string

  /**
   * Global unique user name of a user.
   */
  userName?: string

  /**
   * Display name on user profile, can be duplicated.
   */
  displayName?: string

  /**
   * LikerID of LikeCoin, being used by LikeCoin OAuth
   */
  likerId?: string

  /**
   * Liker info of current user
   */
  liker: GQLLiker

  /**
   * URL for user avatar.
   */
  avatar?: string

  /**
   * User information.
   */
  info: GQLUserInfo

  /**
   * User settings.
   */
  settings: GQLUserSettings

  /**
   * Article recommendations for current user.
   */
  recommendation: GQLRecommendation

  /**
   * Articles authored by current user.
   */
  articles: GQLArticleConnection

  /**
   * Topics created by current user.
   */
  topics: GQLTopicConnection

  /**
   * collections authored by current user.
   */
  collections: GQLCollectionConnection

  /**
   * user latest articles or collections
   */
  latestWorks: Array<GQLPinnableWork>

  /**
   * user pinned articles or collections
   */
  pinnedWorks: Array<GQLPinnableWork>

  /**
   * Tags by by usage order of current user.
   */
  tags: GQLTagConnection

  /**
   * Tags owned and maintained by current user.
   */
  maintainedTags: GQLTagConnection

  /**
   * Tags pinned by current user.
   */
  pinnedTags: GQLTagConnection

  /**
   * Drafts authored by current user.
   */
  drafts: GQLDraftConnection

  /**
   * Articles current user commented on
   */
  commentedArticles: GQLArticleConnection

  /**
   * Artilces current user subscribed to.
   */
  subscriptions: GQLArticleConnection

  /**
   * Record of user activity, only accessable by current user.
   */
  activity: GQLUserActivity

  /**
   * Followers of this user.
   */
  followers: GQLUserConnection

  /**
   * Following contents of this user.
   */
  following: GQLFollowing

  /**
   * Whether current user is following viewer.
   */
  isFollower: boolean

  /**
   * Whether viewer is following current user.
   */
  isFollowee: boolean

  /**
   * Users that blocked by current user.
   */
  blockList: GQLUserConnection

  /**
   * Whether current user is blocking viewer.
   */
  isBlocking: boolean

  /**
   * Whether current user is blocked by viewer.
   */
  isBlocked: boolean

  /**
   * user data analytics, only accessable by current user.
   */
  analytics: GQLUserAnalytics

  /**
   * Status of current user.
   */
  status?: GQLUserStatus
  oss: GQLUserOSS
  remark?: string

  /**
   * User Wallet
   */
  wallet: GQLWallet

  /**
   * Payment pointer that resolves to Open Payments endpoints
   */
  paymentPointer?: string
}

export interface GQLCircle extends GQLNode {
  /**
   * Unique ID.
   */
  id: string

  /**
   * Circle avatar's link.
   * @deprecated No longer in use
   */
  avatar?: string

  /**
   * Circle cover's link.
   * @deprecated No longer in use
   */
  cover?: string

  /**
   * Slugified name of this Circle.
   * @deprecated No longer in use
   */
  name: string

  /**
   * Human readable name of this Circle.
   * @deprecated No longer in use
   */
  displayName: string

  /**
   * A short description of this Circle.
   */
  description?: string

  /**
   * Prices offered by this Circle.
   */
  prices?: Array<GQLPrice>

  /**
   * Circle owner.
   */
  owner: GQLUser

  /**
   * List of Circle member.
   * @deprecated No longer in use
   */
  members: GQLMemberConnection

  /**
   * List of Circle follower.
   * @deprecated No longer in use
   */
  followers: GQLUserConnection

  /**
   * List of works belong to this Circle.
   * @deprecated No longer in use
   */
  works: GQLArticleConnection

  /**
   * State of this Circle.
   * @deprecated No longer in use
   */
  state: GQLCircleState

  /**
   * Created time.
   * @deprecated No longer in use
   */
  createdAt: GQLDateTime

  /**
   * Updated time.
   * @deprecated No longer in use
   */
  updatedAt: GQLDateTime

  /**
   * This value determines if current viewer is following Circle or not.
   * @deprecated No longer in use
   */
  isFollower: boolean

  /**
   * This value determines if current viewer is Member or not.
   * @deprecated No longer in use
   */
  isMember: boolean

  /**
   * Invitations belonged to this Circle.
   */
  invites: GQLInvites

  /**
   * Invitation used by current viewer.
   */
  invitedBy?: GQLInvitation

  /**
   * Analytics dashboard.
   */
  analytics: GQLCircleAnalytics

  /**
   * Comments broadcasted by Circle owner.
   */
  broadcast: GQLCommentConnection

  /**
   * Pinned comments broadcasted by Circle owner.
   */
  pinnedBroadcast?: Array<GQLComment>

  /**
   * Comments made by Circle member.
   */
  discussion: GQLCommentConnection

  /**
   * Discussion (exclude replies) count of this circle.
   */
  discussionThreadCount: number

  /**
   * Discussion (include replies) count of this circle.
   */
  discussionCount: number
}

export interface GQLPrice {
  /**
   * Unique ID.
   */
  id: string

  /**
   * Amount of Price.
   */
  amount: number

  /**
   * Current Price belongs to whcih Circle.
   */
  circle: GQLCircle

  /**
   * Currency of Price.
   */
  currency: GQLTransactionCurrency

  /**
   * State of Price.
   */
  state: GQLPriceState

  /**
   * Created time.
   * @deprecated No longer in use
   */
  createdAt: GQLDateTime

  /**
   * Updated time.
   * @deprecated No longer in use
   */
  updatedAt: GQLDateTime
}

export const enum GQLTransactionCurrency {
  HKD = 'HKD',
  LIKE = 'LIKE',
  USDT = 'USDT',
}

export const enum GQLPriceState {
  active = 'active',
  archived = 'archived',
}

export interface GQLConnectionArgs {
  after?: string
  first?: GQLfirst_Int_min_0
  oss?: boolean
  filter?: GQLFilterInput
}

export type GQLfirst_Int_min_0 = any

export interface GQLFilterInput {
  /**
   * index of list, min: 0, max: 49
   */
  random?: GQLrandom_Int_min_0_max_49

  /**
   * Used in RecommendInput
   */
  followed?: boolean

  /**
   * Used in User.topics
   */
  public?: boolean

  /**
   * Used in User Articles filter, by tags or by time range, or both
   */
  tagIds?: Array<string>
  inRangeStart?: GQLDateTime
  inRangeEnd?: GQLDateTime
}

export type GQLrandom_Int_min_0_max_49 = any

export interface GQLMemberConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLMemberEdge>
}

export interface GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
}

/** Use this to resolve interface type Connection */
export type GQLPossibleConnectionTypeNames =
  | 'MemberConnection'
  | 'UserConnection'
  | 'ArticleConnection'
  | 'InvitationConnection'
  | 'CommentConnection'
  | 'CircleConnection'
  | 'NoticeConnection'
  | 'TagConnection'
  | 'FollowingActivityConnection'
  | 'TopicConnection'
  | 'CollectionConnection'
  | 'DraftConnection'
  | 'ReadHistoryConnection'
  | 'RecentSearchConnection'
  | 'AppreciationConnection'
  | 'TopDonatorConnection'
  | 'TransactionConnection'
  | 'ArticleVersionsConnection'
  | 'ResponseConnection'
  | 'SearchResultConnection'
  | 'OAuthClientConnection'
  | 'SkippedListItemsConnection'
  | 'ReportConnection'
  | 'IcymiTopicConnection'

export interface GQLConnectionNameMap {
  Connection: GQLConnection
  MemberConnection: GQLMemberConnection
  UserConnection: GQLUserConnection
  ArticleConnection: GQLArticleConnection
  InvitationConnection: GQLInvitationConnection
  CommentConnection: GQLCommentConnection
  CircleConnection: GQLCircleConnection
  NoticeConnection: GQLNoticeConnection
  TagConnection: GQLTagConnection
  FollowingActivityConnection: GQLFollowingActivityConnection
  TopicConnection: GQLTopicConnection
  CollectionConnection: GQLCollectionConnection
  DraftConnection: GQLDraftConnection
  ReadHistoryConnection: GQLReadHistoryConnection
  RecentSearchConnection: GQLRecentSearchConnection
  AppreciationConnection: GQLAppreciationConnection
  TopDonatorConnection: GQLTopDonatorConnection
  TransactionConnection: GQLTransactionConnection
  ArticleVersionsConnection: GQLArticleVersionsConnection
  ResponseConnection: GQLResponseConnection
  SearchResultConnection: GQLSearchResultConnection
  OAuthClientConnection: GQLOAuthClientConnection
  SkippedListItemsConnection: GQLSkippedListItemsConnection
  ReportConnection: GQLReportConnection
  IcymiTopicConnection: GQLIcymiTopicConnection
}

export interface GQLPageInfo {
  startCursor?: string
  endCursor?: string
  hasNextPage: boolean
  hasPreviousPage: boolean
}

export interface GQLMemberEdge {
  cursor: string
  node: GQLMember
}

export interface GQLMember {
  /**
   * User who join to a Circle.
   */
  user: GQLUser

  /**
   * Price chosen by user when joining a Circle.
   */
  price: GQLPrice
}

export interface GQLUserConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLUserEdge>
}

export interface GQLUserEdge {
  cursor: string
  node: GQLUser
}

export interface GQLArticleConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLArticleEdge>
}

export interface GQLArticleEdge {
  cursor: string
  node: GQLArticle
}

export const enum GQLCircleState {
  active = 'active',
  archived = 'archived',
}

export interface GQLInvites {
  /**
   * Accepted invitation list
   */
  accepted: GQLInvitationConnection

  /**
   * Pending invitation list
   */
  pending: GQLInvitationConnection
}

export interface GQLInvitationConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLInvitationEdge>
}

export interface GQLInvitationEdge {
  cursor: string
  node: GQLInvitation
}

export interface GQLInvitation {
  /**
   * Unique ID.
   */
  id: string

  /**
   * Target person of this invitation.
   */
  invitee: GQLInvitee

  /**
   * Creator of this invitation.
   */
  inviter: GQLUser

  /**
   * Invitation of current Circle.
   */
  circle: GQLCircle

  /**
   * Free period of this invitation.
   */
  freePeriod: number

  /**
   * Created time.
   */
  createdAt: GQLDateTime

  /**
   * Sent time.
   */
  sentAt: GQLDateTime

  /**
   * Accepted time.
   */
  acceptedAt?: GQLDateTime

  /**
   * Determine it's specific state.
   */
  state: GQLInvitationState
}

export type GQLInvitee = GQLPerson | GQLUser

/** Use this to resolve union type Invitee */
export type GQLPossibleInviteeTypeNames = 'Person' | 'User'

export interface GQLInviteeNameMap {
  Invitee: GQLInvitee
  Person: GQLPerson
  User: GQLUser
}

export interface GQLPerson {
  email: GQLemail_String_NotNull_format_email
}

export type GQLemail_String_NotNull_format_email = any

export const enum GQLInvitationState {
  accepted = 'accepted',
  pending = 'pending',
  transfer_succeeded = 'transfer_succeeded',
  transfer_failed = 'transfer_failed',
}

export interface GQLCircleAnalytics {
  income: GQLCircleIncomeAnalytics
  subscriber: GQLCircleSubscriberAnalytics
  follower: GQLCircleFollowerAnalytics
  content: GQLCircleContentAnalytics
}

export interface GQLCircleIncomeAnalytics {
  /**
   * income history of last 4 months
   */
  history: Array<GQLMonthlyDatum>

  /**
   * total income of all time
   */
  total: number

  /**
   * income of this month
   */
  thisMonth: number

  /**
   * income of next month
   */
  nextMonth: number
}

export interface GQLMonthlyDatum {
  value: number
  date: GQLDateTime
}

export interface GQLCircleSubscriberAnalytics {
  /**
   * subscriber count history of last 4 months
   */
  subscriberHistory: Array<GQLMonthlyDatum>

  /**
   * invitee count history of last 4 months
   */
  inviteeHistory: Array<GQLMonthlyDatum>

  /**
   * current subscriber count
   */
  currentSubscriber: number

  /**
   * current invitee count
   */
  currentInvitee: number
}

export interface GQLCircleFollowerAnalytics {
  /**
   * subscriber count history of last 4 months
   */
  history: Array<GQLMonthlyDatum>

  /**
   * current follower count
   */
  current: number

  /**
   * the percentage of follower count in reader count of circle articles
   */
  followerPercentage: number
}

export interface GQLCircleContentAnalytics {
  public?: Array<GQLCircleContentAnalyticsDatum>
  paywall?: Array<GQLCircleContentAnalyticsDatum>
}

export interface GQLCircleContentAnalyticsDatum {
  node: GQLArticle
  readCount: number
}

export interface GQLCommentsInput {
  sort?: GQLCommentSort
  after?: string
  before?: string
  includeAfter?: boolean
  includeBefore?: boolean
  first?: GQLfirst_Int_min_0
  filter?: GQLCommentsFilter
}

/**
 * Enums for sorting comments by time.
 */
export const enum GQLCommentSort {
  oldest = 'oldest',
  newest = 'newest',
}

export interface GQLCommentsFilter {
  parentComment?: string
  state?: GQLCommentState
  author?: string
}

/**
 * Enums for comment state.
 */
export const enum GQLCommentState {
  active = 'active',
  archived = 'archived',
  banned = 'banned',
  collapsed = 'collapsed',
}

export interface GQLCommentConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLCommentEdge>
}

export interface GQLCommentEdge {
  cursor: string
  node: GQLComment
}

/**
 * This type contains content, author, descendant comments and related data of a comment.
 */
export interface GQLComment extends GQLNode {
  /**
   * Unique ID of this comment.
   */
  id: string

  /**
   * State of this comment.
   */
  state: GQLCommentState
  type: GQLCommentType

  /**
   * Time of this comment was created.
   */
  createdAt: GQLDateTime

  /**
   * Content of this comment.
   */
  content?: string

  /**
   * Author of this comment.
   */
  author: GQLUser

  /**
   * This value determines this comment is pinned or not.
   */
  pinned: boolean

  /**
   * This value determines this comment is from article donator or not.
   */
  fromDonator: boolean

  /**
   * The counting number of upvotes.
   */
  upvotes: number

  /**
   * The counting number of downvotes.
   * @deprecated No longer in use in querying
   */
  downvotes: number

  /**
   * The value determines current user's vote.
   */
  myVote?: GQLVote

  /**
   * Descendant comments of this comment.
   */
  comments: GQLCommentConnection

  /**
   * Parent comment of this comment.
   */
  parentComment?: GQLComment

  /**
   * A Comment that this comment replied to.
   */
  replyTo?: GQLComment
  remark?: string

  /**
   * Current comment belongs to which Node.
   */
  node: GQLNode
}

export const enum GQLCommentType {
  article = 'article',
  circleDiscussion = 'circleDiscussion',
  circleBroadcast = 'circleBroadcast',
}

/**
 * Enums for vote types.
 */
export const enum GQLVote {
  up = 'up',
  down = 'down',
}

export interface GQLCommentCommentsInput {
  author?: string
  sort?: GQLCommentSort
  after?: string
  first?: GQLfirst_Int_min_0
}

export interface GQLCircleConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLCircleEdge>
}

export interface GQLCircleEdge {
  cursor: string
  node: GQLCircle
}

export interface GQLNoticeConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLNoticeEdge>
}

export interface GQLNoticeEdge {
  cursor: string
  node: GQLNotice
}

/**
 * This interface contains common fields of a notice.
 */
export interface GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime
}

/** Use this to resolve interface type Notice */
export type GQLPossibleNoticeTypeNames =
  | 'ArticleArticleNotice'
  | 'ArticleNotice'
  | 'CircleNotice'
  | 'CommentCommentNotice'
  | 'CommentNotice'
  | 'OfficialAnnouncementNotice'
  | 'TransactionNotice'
  | 'UserNotice'

export interface GQLNoticeNameMap {
  Notice: GQLNotice
  ArticleArticleNotice: GQLArticleArticleNotice
  ArticleNotice: GQLArticleNotice
  CircleNotice: GQLCircleNotice
  CommentCommentNotice: GQLCommentCommentNotice
  CommentNotice: GQLCommentNotice
  OfficialAnnouncementNotice: GQLOfficialAnnouncementNotice
  TransactionNotice: GQLTransactionNotice
  UserNotice: GQLUserNotice
}

export interface GQLLiker {
  /**
   * Liker ID of LikeCoin
   */
  likerId?: string

  /**
   * Whether liker is a civic liker
   */
  civicLiker: boolean

  /**
   * Total LIKE left in wallet.
   */
  total: number

  /**
   * Rate of LikeCoin/USD
   * @deprecated No longer in use
   */
  rateUSD?: number
}

export interface GQLUserInfo {
  /**
   * Timestamp of registration.
   */
  createdAt?: GQLDateTime

  /**
   * Is user name editable.
   */
  userNameEditable: boolean

  /**
   * User desciption.
   */
  description?: string

  /**
   * the ipnsKey (`ipfs.io/ipns/<ipnsKey>/...`) for feed.json / rss.xml / index
   */
  ipnsKey?: string

  /**
   * User email.
   */
  email?: GQLemail_String_format_email

  /**
   * Weather user email is verified.
   */
  emailVerified: boolean

  /**
   * User connected social accounts.
   */
  socialAccounts: Array<GQLSocialAccount>

  /**
   * User badges.
   */
  badges?: Array<GQLBadge>

  /**
   * Timestamp of user agreement.
   */
  agreeOn?: GQLDateTime

  /**
   * Cover of profile page.
   */
  profileCover?: string

  /**
   * Type of group.
   */
  group: GQLUserGroup

  /**
   * Login address
   */
  ethAddress?: string
  isWalletAuth: boolean

  /**
   * Connected wallet.
   */
  cryptoWallet?: GQLCryptoWallet

  /**
   * saved tags for showing on profile page, API allows up to 100, front-end lock'ed at lower limit
   */
  featuredTags?: Array<GQLTag>
}

export type GQLemail_String_format_email = any

export interface GQLSocialAccount {
  type: GQLSocialAccountType
  userName?: string
  email?: string
}

export const enum GQLSocialAccountType {
  Google = 'Google',
  Twitter = 'Twitter',
  Facebook = 'Facebook',
}

export interface GQLBadge {
  type: GQLBadgeType
}

export const enum GQLBadgeType {
  seed = 'seed',
  golden_motor = 'golden_motor',
  architect = 'architect',
  nomad1 = 'nomad1',
  nomad2 = 'nomad2',
  nomad3 = 'nomad3',
  nomad4 = 'nomad4',
}

export const enum GQLUserGroup {
  a = 'a',
  b = 'b',
}

export interface GQLCryptoWallet {
  id: string
  address: string

  /**
   *  does this address own any Travelogger NFTs? this value is cached at most 1day, and refreshed at next `nfts` query
   */
  hasNFTs: boolean

  /**
   * NFT assets owned by this wallet address
   */
  nfts?: Array<GQLNFTAsset>
}

/**
 *  NFT Asset
 */
export interface GQLNFTAsset {
  id: string
  name: string
  description?: string
  imageUrl: string
  imagePreviewUrl?: string

  /**
   * imageOriginalUrl: String!
   */
  contractAddress: string
  collectionName: string
}

/**
 * This type contains content, count and related data of an article tag.
 */
export interface GQLTag extends GQLNode {
  /**
   * Unique id of this tag.
   */
  id: string

  /**
   * Content of this tag.
   */
  content: string

  /**
   * List of how many articles were attached with this tag.
   */
  articles: GQLArticleConnection

  /**
   * This value determines if this article is selected by this tag or not.
   */
  selected: boolean

  /**
   * Time of this tag was created.
   */
  createdAt: GQLDateTime

  /**
   * Tag's cover link.
   */
  cover?: string

  /**
   * Description of this tag.
   */
  description?: string

  /**
   * Editors of this tag.
   */
  editors?: Array<GQLUser>

  /**
   * Creator of this tag.
   */
  creator?: GQLUser

  /**
   * Owner of this tag.
   */
  owner?: GQLUser

  /**
   * This value determines if current viewer is following or not.
   */
  isFollower?: boolean

  /**
   * This value determines if the tag is pinned by current viewer.
   */
  isPinned?: boolean

  /**
   * Followers of this tag.
   */
  followers: GQLUserConnection

  /**
   * Participants of this tag.
   */
  participants: GQLUserConnection

  /**
   * Tags recommended based on relations to current tag.
   */
  recommended: GQLTagConnection

  /**
   * This value determines if it is official.
   */
  isOfficial?: boolean

  /**
   * Counts of this tag.
   */
  numArticles: number
  numAuthors: number
  oss: GQLTagOSS
  remark?: string
  deleted: boolean
}

export interface GQLTagArticlesInput {
  after?: string
  first?: GQLfirst_Int_min_0
  oss?: boolean
  selected?: boolean
  sortBy?: GQLTagArticlesSortBy
}

export const enum GQLTagArticlesSortBy {
  byHottestDesc = 'byHottestDesc',
  byCreatedAtDesc = 'byCreatedAtDesc',
}

export interface GQLTagSelectedInput {
  id?: string
  mediaHash?: string
}

export interface GQLTagEditorsInput {
  excludeAdmin?: boolean
  excludeOwner?: boolean
}

export interface GQLTagConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLTagEdge>
}

export interface GQLTagEdge {
  cursor: string
  node: GQLTag
}

export interface GQLTagOSS {
  boost: number
  score: number
  selected: boolean
}

export interface GQLUserSettings {
  /**
   * User language setting.
   */
  language: GQLUserLanguage

  /**
   * User currency preference.
   */
  currency: GQLQuoteCurrency

  /**
   * Notification settings.
   */
  notification?: GQLNotificationSetting
}

export const enum GQLUserLanguage {
  en = 'en',
  zh_hans = 'zh_hans',
  zh_hant = 'zh_hant',
}

export const enum GQLQuoteCurrency {
  TWD = 'TWD',
  HKD = 'HKD',
  USD = 'USD',
}

export interface GQLNotificationSetting {
  email: boolean
  mention: boolean
  userNewFollower: boolean
  articleNewComment: boolean
  articleNewAppreciation: boolean
  articleNewSubscription: boolean
  articleNewCollected: boolean
  articleCommentPinned: boolean

  /**
   * for circle owners
   */
  circleNewSubscriber: boolean
  circleNewFollower: boolean
  circleNewUnsubscriber: boolean
  circleMemberNewBroadcastReply: boolean
  circleMemberNewDiscussion: boolean
  circleMemberNewDiscussionReply: boolean

  /**
   * for circle members & followers
   */
  inCircleNewArticle: boolean
  inCircleNewBroadcast: boolean
  inCircleNewBroadcastReply: boolean
  inCircleNewDiscussion: boolean
  inCircleNewDiscussionReply: boolean
}

export interface GQLRecommendation {
  /**
   * Activities based on user's following, sort by creation time.
   */
  following: GQLFollowingActivityConnection

  /**
   * Articles recommended based on recently read article tags.
   * @deprecated Merged into following
   */
  readTagsArticles: GQLArticleConnection

  /**
   * Global articles sort by publish time.
   */
  newest: GQLArticleConnection

  /**
   * Global articles sort by latest activity time.
   */
  hottest: GQLArticleConnection

  /**
   * 'In case you missed it' recommendation.
   */
  icymi: GQLArticleConnection

  /**
   * 'In case you missed it' topic.
   */
  icymiTopic?: GQLIcymiTopic

  /**
   * Global tag list, sort by activities in recent 14 days.
   */
  tags: GQLTagConnection

  /**
   * Hottest tag list
   */
  hottestTags: GQLTagConnection

  /**
   * Selected tag list
   */
  selectedTags: GQLTagConnection

  /**
   * Global user list, sort by activities in recent 6 month.
   */
  authors: GQLUserConnection

  /**
   * Global circles sort by created time.
   */
  newestCircles: GQLCircleConnection

  /**
   * Global circles sort by latest activity time.
   */
  hottestCircles: GQLCircleConnection
}

export interface GQLFollowingActivityConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLFollowingActivityEdge>
}

export interface GQLFollowingActivityEdge {
  cursor: string
  node: GQLFollowingActivity
}

export type GQLFollowingActivity =
  | GQLUserPublishArticleActivity
  | GQLUserAddArticleTagActivity
  | GQLUserBroadcastCircleActivity
  | GQLUserCreateCircleActivity
  | GQLUserRecommendationActivity
  | GQLArticleRecommendationActivity
  | GQLCircleRecommendationActivity

/** Use this to resolve union type FollowingActivity */
export type GQLPossibleFollowingActivityTypeNames =
  | 'UserPublishArticleActivity'
  | 'UserAddArticleTagActivity'
  | 'UserBroadcastCircleActivity'
  | 'UserCreateCircleActivity'
  | 'UserRecommendationActivity'
  | 'ArticleRecommendationActivity'
  | 'CircleRecommendationActivity'

export interface GQLFollowingActivityNameMap {
  FollowingActivity: GQLFollowingActivity
  UserPublishArticleActivity: GQLUserPublishArticleActivity
  UserAddArticleTagActivity: GQLUserAddArticleTagActivity
  UserBroadcastCircleActivity: GQLUserBroadcastCircleActivity
  UserCreateCircleActivity: GQLUserCreateCircleActivity
  UserRecommendationActivity: GQLUserRecommendationActivity
  ArticleRecommendationActivity: GQLArticleRecommendationActivity
  CircleRecommendationActivity: GQLCircleRecommendationActivity
}

export interface GQLUserPublishArticleActivity {
  actor: GQLUser
  createdAt: GQLDateTime

  /**
   * Article published by actor
   */
  node: GQLArticle
}

export interface GQLUserAddArticleTagActivity {
  actor: GQLUser
  createdAt: GQLDateTime

  /**
   * Article added to tag
   */
  node: GQLArticle

  /**
   * Tag added by article
   */
  target: GQLTag
}

export interface GQLUserBroadcastCircleActivity {
  actor: GQLUser
  createdAt: GQLDateTime

  /**
   * Comment broadcast by actor
   */
  node: GQLComment

  /**
   * Circle that comment belongs to
   */
  target: GQLCircle
}

export interface GQLUserCreateCircleActivity {
  actor: GQLUser
  createdAt: GQLDateTime

  /**
   * Circle created by actor
   */
  node: GQLCircle
}

export interface GQLUserRecommendationActivity {
  /**
   * The source type of recommendation
   */
  source?: GQLUserRecommendationActivitySource

  /**
   * Recommended users
   */
  nodes?: Array<GQLUser>
}

export const enum GQLUserRecommendationActivitySource {
  UserFollowing = 'UserFollowing',
}

export interface GQLArticleRecommendationActivity {
  /**
   * The source type of recommendation
   */
  source?: GQLArticleRecommendationActivitySource

  /**
   * Recommended articles
   */
  nodes?: Array<GQLArticle>
}

export const enum GQLArticleRecommendationActivitySource {
  UserDonation = 'UserDonation',
  ReadArticlesTags = 'ReadArticlesTags',
}

export interface GQLCircleRecommendationActivity {
  /**
   * The source type of recommendation
   */
  source?: GQLCircleRecommendationActivitySource

  /**
   * Recommended circles
   */
  nodes?: Array<GQLCircle>
}

export const enum GQLCircleRecommendationActivitySource {
  UserSubscription = 'UserSubscription',
}

export interface GQLIcymiTopic extends GQLNode {
  id: string
  title: string
  articles: Array<GQLArticle>
  pinAmount: number
  note?: string
  state: GQLIcymiTopicState
  publishedAt?: GQLDateTime
  archivedAt?: GQLDateTime
}

export const enum GQLIcymiTopicState {
  published = 'published',
  editing = 'editing',
  archived = 'archived',
}

export interface GQLRecommendInput {
  after?: string
  first?: GQLfirst_Int_min_0
  oss?: boolean
  filter?: GQLFilterInput
  type?: GQLAuthorsType
}

export const enum GQLAuthorsType {
  active = 'active',
  appreciated = 'appreciated',
  default = 'default',
  trendy = 'trendy',
}

export interface GQLUserArticlesInput {
  after?: string
  first?: GQLfirst_Int_min_0
  sort?: GQLUserArticlesSort
  filter?: GQLUserArticlesFilter
}

export const enum GQLUserArticlesSort {
  newest = 'newest',
  mostReaders = 'mostReaders',
  mostAppreciations = 'mostAppreciations',
  mostComments = 'mostComments',
  mostDonations = 'mostDonations',
}

export interface GQLUserArticlesFilter {
  state?: GQLArticleState
}

export interface GQLTopicInput {
  after?: string
  first?: GQLfirst_Int_min_0
  filter?: GQLFilterInput
}

export interface GQLTopicConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLTopicEdge>
}

export interface GQLTopicEdge {
  cursor: string
  node: GQLTopic
}

/**
 * This type contains metadata, content and related data of a topic, which is a container for Article and Chapter types.
 */
export interface GQLTopic extends GQLNode {
  /**
   * Unique id of this topic.
   */
  id: string

  /**
   * Title of this topic.
   */
  title: string

  /**
   * Cover of this topic.
   */
  cover?: string

  /**
   * Description of this topic.
   */
  description?: string

  /**
   * Number of chapters included in this topic.
   */
  chapterCount: number

  /**
   * Number articles included in this topic.
   */
  articleCount: number

  /**
   * List of chapters included in this topic.
   */
  chapters?: Array<GQLChapter>

  /**
   * List of articles included in this topic.
   */
  articles?: Array<GQLArticle>

  /**
   * Author of this topic.
   */
  author: GQLUser

  /**
   * Whether this topic is public or not.
   */
  public: boolean

  /**
   * Latest published article on this topic
   */
  latestArticle?: GQLArticle
}

/**
 * This type contains metadata, content and related data of Chapter type, which is
 * a container for Article type. A Chapter belong to a Topic.
 */
export interface GQLChapter extends GQLNode {
  /**
   * Unique id of this chapter.
   */
  id: string

  /**
   * Title of this chapter.
   */
  title: string

  /**
   * Description of this chapter.
   */
  description?: string

  /**
   * Number articles included in this chapter.
   */
  articleCount: number

  /**
   * Articles included in this Chapter
   */
  articles?: Array<GQLArticle>

  /**
   * The topic that this Chapter belongs to.
   */
  topic: GQLTopic
}

export interface GQLCollectionConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLCollectionEdge>
}

export interface GQLCollectionEdge {
  cursor: string
  node: GQLCollection
}

export interface GQLCollection extends GQLNode, GQLPinnableWork {
  id: string
  title: string
  cover?: string
  description?: string
  author: GQLUser
  articles: GQLArticleConnection
  pinned: boolean
  updatedAt: GQLDateTime

  /**
   * Check if the collection contains the article
   */
  contains: boolean
}

export interface GQLCollectionArticlesInput {
  after?: string
  first?: number
  reversed?: boolean
}

export interface GQLNodeInput {
  id: string
}

export interface GQLDraftConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLDraftEdge>
}

export interface GQLDraftEdge {
  cursor: string
  node: GQLDraft
}

/**
 * This type contains content, collections, assets and related data of a draft.
 */
export interface GQLDraft extends GQLNode {
  /**
   * Unique ID of this draft.
   */
  id: string

  /**
   * Media hash, composed of cid encoding, of this draft.
   */
  mediaHash?: string

  /**
   * Draft title.
   */
  title?: string

  /**
   * Slugified draft title.
   */
  slug: string

  /**
   * Summary of this draft.
   */
  summary?: string

  /**
   * This value determines if the summary is customized or not.
   */
  summaryCustomized: boolean

  /**
   * Content (HTML) of this draft.
   */
  content?: string

  /**
   * Time of this draft was created.
   */
  createdAt: GQLDateTime

  /**
   * Last time of this draft was upadted.
   */
  updatedAt: GQLDateTime

  /**
   * The counting number of words in this draft.
   */
  wordCount: number

  /**
   * Tags are attached to this draft.
   */
  tags?: Array<string>

  /**
   * Draft's cover link.
   */
  cover?: string

  /**
   * State of draft during publihsing.
   */
  publishState: GQLPublishState

  /**
   * List of assets are belonged to this draft.
   */
  assets: Array<GQLAsset>

  /**
   * Published article
   */
  article?: GQLArticle

  /**
   * Collection list of this draft.
   */
  collection: GQLArticleConnection

  /**
   * Access related fields on circle
   */
  access: GQLDraftAccess

  /**
   * whether content is marked as sensitive by author
   */
  sensitiveByAuthor: boolean

  /**
   * License Type
   */
  license: GQLArticleLicenseType

  /**
   * creator message asking for support
   */
  requestForDonation?: string

  /**
   * creator message after support
   */
  replyToDonator?: string

  /**
   * whether publish to ISCN
   */
  iscnPublish?: boolean

  /**
   * whether readers can comment
   */
  canComment: boolean
}

/**
 * Enums for publishing state.
 */
export const enum GQLPublishState {
  unpublished = 'unpublished',
  pending = 'pending',
  error = 'error',
  published = 'published',
}

/**
 * This type contains type, link and related data of an asset.
 */
export interface GQLAsset {
  /**
   * Unique ID of this Asset.
   */
  id: string

  /**
   * Types of this asset.
   */
  type: GQLAssetType

  /**
   * Link of this asset.
   */
  path: string
  draft?: boolean
  uploadURL?: string

  /**
   * Time of this asset was created.
   */
  createdAt: GQLDateTime
}

/**
 * Enums for asset types.
 */
export const enum GQLAssetType {
  avatar = 'avatar',
  cover = 'cover',
  embed = 'embed',
  embedaudio = 'embedaudio',
  profileCover = 'profileCover',
  oauthClientAvatar = 'oauthClientAvatar',
  tagCover = 'tagCover',
  circleAvatar = 'circleAvatar',
  circleCover = 'circleCover',
  collectionCover = 'collectionCover',
  announcementCover = 'announcementCover',
  topicCover = 'topicCover',
}

export interface GQLDraftAccess {
  type: GQLArticleAccessType
  circle?: GQLCircle
}

/**
 * Enums for types of article access
 */
export const enum GQLArticleAccessType {
  public = 'public',
  paywall = 'paywall',
}

/**
 * Enums for types of article license
 */
export const enum GQLArticleLicenseType {
  cc_0 = 'cc_0',
  cc_by_nc_nd_2 = 'cc_by_nc_nd_2',
  cc_by_nc_nd_4 = 'cc_by_nc_nd_4',
  arr = 'arr',
}

export interface GQLUserActivity {
  /**
   * User reading history.
   */
  history: GQLReadHistoryConnection

  /**
   * User search history.
   */
  recentSearches: GQLRecentSearchConnection

  /**
   * Appreciations current user gave.
   */
  appreciationsSent: GQLAppreciationConnection

  /**
   * Total number of appreciation current user gave.
   */
  appreciationsSentTotal: number

  /**
   * Appreciations current user received.
   */
  appreciationsReceived: GQLAppreciationConnection

  /**
   * Total number of appreciation current user received.
   */
  appreciationsReceivedTotal: number
}

export interface GQLReadHistoryConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLReadHistoryEdge>
}

export interface GQLReadHistoryEdge {
  cursor: string
  node: GQLReadHistory
}

export interface GQLReadHistory {
  article: GQLArticle
  readAt: GQLDateTime
}

export interface GQLRecentSearchConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLRecentSearchEdge>
}

export interface GQLRecentSearchEdge {
  cursor: string
  node: string
}

export interface GQLAppreciationConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLAppreciationEdge>
}

export interface GQLAppreciationEdge {
  cursor: string
  node: GQLAppreciation
}

export interface GQLAppreciation {
  amount: number
  purpose: GQLAppreciationPurpose
  content: string

  /**
   * Timestamp of appreciation.
   */
  createdAt: GQLDateTime

  /**
   * Recipient of appreciation.
   */
  recipient: GQLUser

  /**
   * Sender of appreciation.
   */
  sender?: GQLUser

  /**
   * Object that appreciation is meant for.
   */
  target?: GQLArticle
}

export const enum GQLAppreciationPurpose {
  appreciate = 'appreciate',
  appreciateComment = 'appreciateComment',
  appreciateSubsidy = 'appreciateSubsidy',
  invitationAccepted = 'invitationAccepted',
  joinByInvitation = 'joinByInvitation',
  joinByTask = 'joinByTask',
  firstPost = 'firstPost',
  systemSubsidy = 'systemSubsidy',
}

export interface GQLFollowing {
  circles: GQLCircleConnection
  tags: GQLTagConnection
  users: GQLUserConnection
}

export interface GQLUserAnalytics {
  /**
   * Top donators of current user.
   */
  topDonators: GQLTopDonatorConnection
}

export interface GQLTopDonatorInput {
  after?: string
  first?: number
  filter?: GQLTopDonatorFilter
}

export interface GQLTopDonatorFilter {
  inRangeStart?: GQLDateTime
  inRangeEnd?: GQLDateTime
}

export interface GQLTopDonatorConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLTopDonatorEdge>
}

export interface GQLTopDonatorEdge {
  cursor: string
  node: GQLUser
  donationCount: number
}

export interface GQLUserStatus {
  /**
   * User state.
   */
  state: GQLUserState

  /**
   * User role and access level.
   */
  role: GQLUserRole

  /**
   * Number of articles published by user
   */
  articleCount: number

  /**
   * Number of comments posted by user.
   */
  commentCount: number

  /**
   * Number of unread notices.
   */
  unreadNoticeCount: number

  /**
   * Whether there are unread activities from following.
   */
  unreadFollowing: boolean

  /**
   * Number of total written words.
   */
  totalWordCount: number

  /**
   * Number of referred user registration count (in Digital Nomad Campaign).
   */
  totalReferredCount: number

  /**
   * Weather login password is set for email login.
   */
  hasEmailLoginPassword: boolean

  /**
   * Number of chances for the user to change email in a nature day. Reset in UTC+8 0:00
   */
  changeEmailTimesLeft: number

  /**
   * Whether user already set payment password.
   */
  hasPaymentPassword: boolean

  /**
   * Number of articles donated by user
   */
  donatedArticleCount: number

  /**
   * Number of times of donations received by user
   */
  receivedDonationCount: number
}

export const enum GQLUserState {
  active = 'active',
  banned = 'banned',
  archived = 'archived',
  frozen = 'frozen',
}

export const enum GQLUserRole {
  user = 'user',
  admin = 'admin',
}

export interface GQLUserOSS {
  boost: number
  score: number
  restrictions: Array<GQLUserRestriction>
}

export interface GQLUserRestriction {
  type: GQLUserRestrictionType
  createdAt: GQLDateTime
}

export const enum GQLUserRestrictionType {
  articleHottest = 'articleHottest',
  articleNewest = 'articleNewest',
}

export interface GQLWallet {
  balance: GQLBalance
  transactions: GQLTransactionConnection

  /**
   * Account of Stripe Connect to manage payout
   */
  stripeAccount?: GQLStripeAccount

  /**
   * URL of Stripe Dashboard to manage subscription invoice and payment method
   */
  customerPortal?: string

  /**
   * The last four digits of the card.
   */
  cardLast4?: string
}

export interface GQLBalance {
  HKD: number
}

export interface GQLTransactionsArgs {
  after?: string
  first?: GQLfirst_Int_min_0

  /**
   * deprecated, use TransactionsFilter.id instead.
   */
  id?: string

  /**
   * deprecated, use TransactionsFilter.states instead.
   */
  states?: Array<GQLTransactionState>
  filter?: GQLTransactionsFilter
}

export const enum GQLTransactionState {
  pending = 'pending',
  succeeded = 'succeeded',
  failed = 'failed',
  canceled = 'canceled',
}

export interface GQLTransactionsFilter {
  id?: string
  states?: Array<GQLTransactionState>
  currency?: GQLTransactionCurrency
  purpose?: GQLTransactionPurpose
}

export const enum GQLTransactionPurpose {
  donation = 'donation',
  addCredit = 'addCredit',
  refund = 'refund',
  payout = 'payout',
  subscriptionSplit = 'subscriptionSplit',
  dispute = 'dispute',
  payoutReversal = 'payoutReversal',
}

export interface GQLTransactionConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLTransactionEdge>
}

export interface GQLTransactionEdge {
  cursor: string
  node: GQLTransaction
}

export interface GQLTransaction {
  id: string
  state: GQLTransactionState
  purpose: GQLTransactionPurpose
  amount: number
  fee: number
  currency: GQLTransactionCurrency

  /**
   * Timestamp of transaction.
   */
  createdAt: GQLDateTime

  /**
   * Recipient of transaction.
   */
  recipient?: GQLUser

  /**
   * Sender of transaction.
   */
  sender?: GQLUser

  /**
   * Related target article or transaction.
   */
  target?: GQLTransactionTarget

  /**
   * Message for end user, including reason of failure.
   */
  message?: string

  /**
   * blockchain transaction info of ERC20/native token payment transaction
   */
  blockchainTx?: GQLBlockchainTransaction
}

export type GQLTransactionTarget = GQLArticle | GQLCircle | GQLTransaction

/** Use this to resolve union type TransactionTarget */
export type GQLPossibleTransactionTargetTypeNames =
  | 'Article'
  | 'Circle'
  | 'Transaction'

export interface GQLTransactionTargetNameMap {
  TransactionTarget: GQLTransactionTarget
  Article: GQLArticle
  Circle: GQLCircle
  Transaction: GQLTransaction
}

export interface GQLBlockchainTransaction {
  chain: GQLChain
  txHash: string
}

export const enum GQLChain {
  Polygon = 'Polygon',
  Optimism = 'Optimism',
}

export interface GQLStripeAccount {
  id: string
  loginUrl: string
}

export interface GQLArticleContents {
  /**
   * Markdown content of this article.
   */
  markdown: string

  /**
   * HTML content of this article.
   */
  html: string
}

export interface GQLRelatedDonationArticlesInput {
  after?: string
  first?: GQLfirst_Int_min_0
  oss?: boolean

  /**
   * index of article list, min: 0, max: 49
   */
  random?: GQLrandom_Int_min_0_max_49
}

export interface GQLTranslationArgs {
  language: GQLUserLanguage
}

export interface GQLArticleTranslation {
  title?: string
  content?: string
  summary?: string
  language?: string
}

export interface GQLTransactionsReceivedByArgs {
  after?: string
  first?: GQLfirst_Int_min_0
  purpose: GQLTransactionPurpose
  senderId?: string
}

export interface GQLArticleDonationConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLArticleDonationEdge>
}

export interface GQLArticleDonationEdge {
  cursor: string
  node: GQLArticleDonation
}

export interface GQLArticleDonation {
  id: string
  sender?: GQLUser
}

export interface GQLArticleAccess {
  type: GQLArticleAccessType
  secret?: string
  circle?: GQLCircle
}

export interface GQLArticleVersionsInput {
  after?: string
  first?: GQLfirst_Int_min_0
}

export interface GQLArticleVersionsConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges: Array<GQLArticleVersionEdge | null>
}

export interface GQLArticleVersionEdge {
  node: GQLArticleVersion
  cursor: string
}

export interface GQLArticleVersion extends GQLNode {
  id: string
  dataHash?: string
  mediaHash?: string
  title: string
  summary: string
  contents: GQLArticleContents
  translation?: GQLArticleTranslation
  createdAt: GQLDateTime
  description?: string
}

export interface GQLArticleOSS {
  boost: number
  score: number
  inRecommendIcymi: boolean
  inRecommendHottest: boolean
  inRecommendNewest: boolean
}

export interface GQLFeaturedCommentsInput {
  sort?: GQLCommentSort
  after?: string
  first?: GQLfirst_Int_min_0
}

export interface GQLResponsesInput {
  sort?: GQLResponseSort
  after?: string
  before?: string
  includeAfter?: boolean
  includeBefore?: boolean
  first?: GQLfirst_Int_min_0
  articleOnly?: boolean
}

/**
 * Enums for sorting responses.
 */
export const enum GQLResponseSort {
  oldest = 'oldest',
  newest = 'newest',
}

export interface GQLResponseConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLResponseEdge>
}

export interface GQLResponseEdge {
  cursor: string
  node: GQLResponse
}

export type GQLResponse = GQLArticle | GQLComment

/** Use this to resolve union type Response */
export type GQLPossibleResponseTypeNames = 'Article' | 'Comment'

export interface GQLResponseNameMap {
  Response: GQLResponse
  Article: GQLArticle
  Comment: GQLComment
}

export interface GQLCircleInput {
  /**
   * Slugified name of a Circle.
   */
  name: string
}

export interface GQLNodesInput {
  ids: Array<string>
}

export interface GQLFrequentSearchInput {
  key?: string
  first?: GQLfirst_Int_min_0
}

export interface GQLSearchInput {
  /**
   * search keyword
   */
  key: string

  /**
   * types of search target
   */
  type: GQLSearchTypes
  after?: string
  first?: GQLfirst_Int_min_0

  /**
   * extra query filter for searching
   */
  filter?: GQLSearchFilter

  /**
   * specific condition for rule data out
   */
  exclude?: GQLSearchExclude

  /**
   * should include tags used by author
   */
  includeAuthorTags?: boolean

  /**
   * whether this search operation should be recorded in search history
   */
  record?: boolean
  oss?: boolean

  /**
   * use the api version; default to use latest stable version is v20230301
   */
  version?: GQLSearchAPIVersion

  /**
   * deprecated, make no effect
   */
  coefficients?: string
  quicksearch?: boolean
}

export const enum GQLSearchTypes {
  Article = 'Article',
  User = 'User',
  Tag = 'Tag',
}

export interface GQLSearchFilter {
  authorId?: string
}

export const enum GQLSearchExclude {
  blocked = 'blocked',
}

export const enum GQLSearchAPIVersion {
  v20230601 = 'v20230601',
  v20230301 = 'v20230301',
}

export interface GQLSearchResultConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLSearchResultEdge>
}

export interface GQLSearchResultEdge {
  cursor: string
  node: GQLNode
}

/**
 * This type contains system-wise info and settings.
 */
export interface GQLOfficial {
  /**
   * Feature flag
   */
  features: Array<GQLFeature>

  /**
   * Announcements
   */
  announcements?: Array<GQLAnnouncement>
}

export interface GQLFeature {
  name: GQLFeatureName
  enabled: boolean
}

export const enum GQLFeatureName {
  add_credit = 'add_credit',
  payment = 'payment',
  payout = 'payout',
  verify_appreciate = 'verify_appreciate',
  fingerprint = 'fingerprint',
  tag_adoption = 'tag_adoption',
  circle_management = 'circle_management',
  circle_interact = 'circle_interact',
}

export interface GQLAnnouncementsInput {
  id?: string
  visible?: boolean
}

export interface GQLAnnouncement {
  id: string
  title?: string
  cover?: string
  content?: string
  link?: string
  type: GQLAnnouncementType
  visible: boolean
  order: number
  createdAt: GQLDateTime
  updatedAt: GQLDateTime
  expiredAt?: GQLDateTime
  translations?: Array<GQLTranslatedAnnouncement>
}

export const enum GQLAnnouncementType {
  community = 'community',
  product = 'product',
  seminar = 'seminar',
}

export interface GQLTranslatedAnnouncement {
  language: GQLUserLanguage
  title?: string
  cover?: string
  content?: string
  link?: GQLlink_String_format_uri
}

export type GQLlink_String_format_uri = any

export interface GQLOSS {
  users: GQLUserConnection
  comments: GQLCommentConnection
  articles: GQLArticleConnection
  tags: GQLTagConnection
  oauthClients: GQLOAuthClientConnection
  skippedListItems: GQLSkippedListItemsConnection
  seedingUsers: GQLUserConnection
  badgedUsers: GQLUserConnection
  restrictedUsers: GQLUserConnection
  reports: GQLReportConnection
  icymiTopics: GQLIcymiTopicConnection
}

export interface GQLTagsInput {
  after?: string
  first?: GQLfirst_Int_min_0
  sort?: GQLTagsSort
}

/**
 * Enums for sorting tags.
 */
export const enum GQLTagsSort {
  newest = 'newest',
  oldest = 'oldest',
  hottest = 'hottest',
}

export interface GQLOAuthClientConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLOAuthClientEdge>
}

export interface GQLOAuthClientEdge {
  cursor: string
  node: GQLOAuthClient
}

export interface GQLOAuthClient {
  /**
   * Unique Client ID of this OAuth Client.
   */
  id: string

  /**
   * App name
   */
  name: string

  /**
   * App Description
   */
  description?: string

  /**
   * URL for oauth client's official website
   */
  website?: string

  /**
   * Scopes
   */
  scope?: Array<string>

  /**
   * URL for oauth client's avatar.
   */
  avatar?: string

  /**
   * Client secret
   */
  secret: string

  /**
   * Redirect URIs
   */
  redirectURIs?: Array<string>

  /**
   * Grant Types
   */
  grantTypes?: Array<GQLGrantType>

  /**
   * Linked Developer Account
   */
  user?: GQLUser

  /**
   * Creation Date
   */
  createdAt: GQLDateTime
}

export const enum GQLGrantType {
  authorization_code = 'authorization_code',
  refresh_token = 'refresh_token',
}

export interface GQLSkippedListItemsInput {
  after?: string
  first?: GQLfirst_Int_min_0
  type?: GQLSkippedListItemType
}

export const enum GQLSkippedListItemType {
  agent_hash = 'agent_hash',
  email = 'email',
  domain = 'domain',
}

export interface GQLSkippedListItemsConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLSkippedListItemEdge>
}

export interface GQLSkippedListItemEdge {
  cursor: string
  node?: GQLSkippedListItem
}

export interface GQLSkippedListItem {
  id: string
  uuid: string
  type: GQLSkippedListItemType
  value: string
  archived: boolean
  createdAt: GQLDateTime
  updatedAt: GQLDateTime
}

export interface GQLBadgedUsersInput {
  after?: string
  first?: GQLfirst_Int_min_0
  type?: GQLBadgeType
}

export interface GQLReportConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLReportEdge>
}

export interface GQLReportEdge {
  cursor: string
  node: GQLReport
}

export interface GQLReport extends GQLNode {
  id: string
  reporter: GQLUser
  target: GQLResponse
  reason: GQLReportReason
  createdAt: GQLDateTime
}

export const enum GQLReportReason {
  tort = 'tort',
  illegal_advertising = 'illegal_advertising',
  discrimination_insult_hatred = 'discrimination_insult_hatred',
  pornography_involving_minors = 'pornography_involving_minors',
  other = 'other',
}

export interface GQLIcymiTopicConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges: Array<GQLIcymiTopicEdge>
}

export interface GQLIcymiTopicEdge {
  cursor: string
  node: GQLIcymiTopic
}

export interface GQLUserInput {
  userName?: string

  /**
   * used for case insensitive username search
   */
  userNameCaseIgnore?: boolean
  ethAddress?: string
}

export interface GQLExchangeRatesInput {
  from?: GQLTransactionCurrency
  to?: GQLQuoteCurrency
}

export interface GQLExchangeRate {
  from: GQLTransactionCurrency
  to: GQLQuoteCurrency
  rate: number

  /**
   * Last updated time from currency convertor APIs
   */
  updatedAt: GQLDateTime
}

export interface GQLOAuthClientInput {
  id: string
}

export interface GQLMutation {
  /**
   * Publish an article onto IPFS.
   */
  publishArticle: GQLDraft

  /**
   * Edit an article.
   */
  editArticle: GQLArticle

  /**
   * Subscribe or Unsubscribe article
   */
  toggleSubscribeArticle: GQLArticle

  /**
   * Appreciate an article.
   */
  appreciateArticle: GQLArticle

  /**
   * Read an article.
   */
  readArticle: GQLArticle

  /**
   * Create a Topic when no id is given, update fields when id is given. Throw error if no id & no title.
   */
  putTopic: GQLTopic

  /**
   * Create a Chapter when no id is given, update fields when id is given. Throw
   * error if no id & no title, or no id & no topic.
   */
  putChapter: GQLChapter

  /**
   * Delete topics
   */
  deleteTopics: boolean

  /**
   * Sort topics
   */
  sortTopics: Array<GQLTopic>

  /**
   * Follow or unfollow tag.
   */
  toggleFollowTag: GQLTag

  /**
   * pin or unpin tag.
   */
  togglePinTag: GQLTag

  /**
   * Create or update tag.
   */
  putTag: GQLTag

  /**
   * Update member, permission and othters of a tag.
   */
  updateTagSetting: GQLTag

  /**
   * Add one tag to articles.
   */
  addArticlesTags: GQLTag

  /**
   * Update articles' tag.
   */
  updateArticlesTags: GQLTag

  /**
   * Delete one tag from articles
   */
  deleteArticlesTags: GQLTag
  toggleArticleRecommend: GQLArticle
  updateArticleState: GQLArticle
  updateArticleSensitive: GQLArticle
  toggleTagRecommend: GQLTag
  deleteTags?: boolean
  renameTag: GQLTag
  mergeTags: GQLTag

  /**
   * Create or update a Circle.
   */
  putCircle: GQLCircle

  /**
   * Follow or unfollow a Circle.
   * @deprecated No longer in use
   */
  toggleFollowCircle: GQLCircle

  /**
   * Subscribe a Circle.
   */
  subscribeCircle: GQLSubscribeCircleResult

  /**
   * Unsubscribe a Circle.
   */
  unsubscribeCircle: GQLCircle

  /**
   * Add or remove Circle's articles
   * @deprecated No longer in use
   */
  putCircleArticles: GQLCircle

  /**
   * Invite others to join circle
   */
  invite?: Array<GQLInvitation>

  /**
   * Publish or update a comment.
   */
  putComment: GQLComment

  /**
   * Remove a comment.
   */
  deleteComment: GQLComment

  /**
   * Pin or Unpin a comment.
   */
  togglePinComment: GQLComment

  /**
   * Upvote or downvote a comment.
   */
  voteComment: GQLComment

  /**
   * Unvote a comment.
   */
  unvoteComment: GQLComment

  /**
   * Update a comments' state.
   */
  updateCommentsState: Array<GQLComment>

  /**
   * Pin a comment.
   */
  pinComment: GQLComment

  /**
   * Unpin a comment.
   */
  unpinComment: GQLComment

  /**
   * Create or update a draft.
   */
  putDraft: GQLDraft

  /**
   * Remove a draft.
   */
  deleteDraft?: boolean

  /**
   * Mark all received notices as read.
   */
  markAllNoticesAsRead?: boolean

  /**
   * Upload a single file.
   */
  singleFileUpload: GQLAsset
  directImageUpload: GQLAsset

  /**
   * Add specific user behavior record.
   */
  logRecord?: boolean

  /**
   * Add blocked search keyword to blocked_search_word db
   */
  addBlockedSearchKeyword: GQLBlockedSearchKeyword

  /**
   * Delete blocked search keywords from search_history db
   */
  deleteBlockedSearchKeywords?: boolean

  /**
   * Submit inappropriate content report
   */
  submitReport: GQLReport
  setBoost: GQLNode
  putRemark?: string
  putSkippedListItem?: Array<GQLSkippedListItem>
  setFeature: GQLFeature
  toggleSeedingUsers: Array<GQLUser | null>
  putAnnouncement: GQLAnnouncement
  deleteAnnouncements: boolean
  putRestrictedUsers: Array<GQLUser>
  putIcymiTopic?: GQLIcymiTopic

  /**
   * Send verification code for email.
   */
  sendVerificationCode?: boolean

  /**
   * Confirm verification code from email.
   */
  confirmVerificationCode: string

  /**
   * Reset user or payment password.
   */
  resetPassword?: boolean

  /**
   * Change user email.
   * @deprecated use 'setEmail' instead
   */
  changeEmail: GQLUser

  /**
   * Set user email.
   */
  setEmail: GQLUser

  /**
   * Verify user email.
   */
  verifyEmail: GQLAuthResult

  /**
   * Set user currency preference.
   */
  setCurrency: GQLUser

  /**
   * Register user, can only be used on matters.{town,news} website.
   * @deprecated use 'emailLogin' instead
   */
  userRegister: GQLAuthResult

  /**
   * Login user.
   * @deprecated use 'emailLogin' instead
   */
  userLogin: GQLAuthResult
  emailLogin: GQLAuthResult

  /**
   * Get signing message.
   */
  generateSigningMessage: GQLSigningMessageResult

  /**
   * Login/Signup via a wallet.
   */
  walletLogin: GQLAuthResult

  /**
   * Add a wallet login to current user.
   */
  addWalletLogin: GQLUser

  /**
   * Remove a wallet login from current user.
   */
  removeWalletLogin: GQLUser

  /**
   * Login/Signup via social accounts.
   */
  socialLogin: GQLAuthResult

  /**
   * Add a social login to current user.
   */
  addSocialLogin: GQLUser

  /**
   * Remove a social login from current user.
   */
  removeSocialLogin: GQLUser

  /**
   * Reset crypto wallet.
   * @deprecated use 'removeWalletLogin' instead
   */
  resetWallet: GQLUser

  /**
   * Logout user.
   */
  userLogout: boolean

  /**
   * Generate or claim a Liker ID through LikeCoin
   * @deprecated No longer in use
   */
  generateLikerId: GQLUser

  /**
   * Reset Liker ID
   */
  resetLikerId: GQLUser

  /**
   * Update user information.
   */
  updateUserInfo: GQLUser

  /**
   * Set user name.
   */
  setUserName: GQLUser

  /**
   * Set user email login password.
   */
  setPassword: GQLUser

  /**
   * Update user notification settings.
   */
  updateNotificationSetting: GQLUser

  /**
   * Follow or Unfollow current user.
   */
  toggleFollowUser: GQLUser

  /**
   * Block or Unblock a given user.
   */
  toggleBlockUser: GQLUser

  /**
   * Clear read history for user.
   */
  clearReadHistory: GQLUser

  /**
   * Clear search history for user.
   */
  clearSearchHistory?: boolean

  /**
   * Migrate articles from other service provider.
   */
  migration?: boolean

  /**
   * Let Traveloggers owner claims a Logbook, returns transaction hash
   */
  claimLogbooks: GQLClaimLogbooksResult

  /**
   * update tags for showing on profile page
   */
  putFeaturedTags?: Array<GQLTag>

  /**
   * Update state of a user, used in OSS.
   */
  updateUserState?: Array<GQLUser>

  /**
   * Update state of a user, used in OSS.
   */
  updateUserRole: GQLUser

  /**
   * Update referralCode of a user, used in OSS.
   */
  updateUserExtra: GQLUser

  /**
   * Update state of a user, used in OSS.
   */
  refreshIPNSFeed: GQLUser
  toggleUsersBadge: Array<GQLUser | null>
  unbindLikerId: GQLUser

  /**
   * Add Credit to User Wallet
   */
  addCredit: GQLAddCreditResult

  /**
   * Pay to another user or article
   */
  payTo: GQLPayToResult

  /**
   * Payout to user
   */
  payout: GQLTransaction

  /**
   * Create Stripe Connect account for Payout
   */
  connectStripeAccount: GQLConnectStripeAccountResult

  /**
   * Create or Update an OAuth Client, used in OSS.
   */
  putOAuthClient?: GQLOAuthClient
  putCollection: GQLCollection
  deleteCollections: boolean

  /**
   * Add articles to the begining of the collections.
   */
  addCollectionsArticles: Array<GQLCollection>

  /**
   * Remove articles from the collection.
   */
  deleteCollectionArticles: GQLCollection

  /**
   * Reorder articles in the collection.
   */
  reorderCollectionArticles: GQLCollection
}

export interface GQLPublishArticleInput {
  id: string

  /**
   * whether publish to ISCN
   */
  iscnPublish?: boolean
}

export interface GQLEditArticleInput {
  id: string
  state?: GQLArticleState

  /**
   * deprecated, use pinned instead
   */
  sticky?: boolean
  pinned?: boolean
  title?: string
  summary?: string
  tags?: Array<string>
  content?: string
  cover?: string
  collection?: Array<string>
  circle?: string
  accessType?: GQLArticleAccessType
  sensitive?: boolean
  license?: GQLArticleLicenseType
  requestForDonation?: GQLrequestForDonation_String_maxLength_140
  replyToDonator?: GQLreplyToDonator_String_maxLength_140

  /**
   * revision description
   */
  description?: GQLdescription_String_maxLength_140

  /**
   * whether publish to ISCN
   */
  iscnPublish?: boolean

  /**
   * whether readers can comment
   */
  canComment?: boolean
}

export type GQLrequestForDonation_String_maxLength_140 = any

export type GQLreplyToDonator_String_maxLength_140 = any

export type GQLdescription_String_maxLength_140 = any

/**
 * Common input to toggle single item for `toggleXXX` mutations
 */
export interface GQLToggleItemInput {
  id: string
  enabled?: boolean
}

export interface GQLAppreciateArticleInput {
  id: string
  amount: GQLamount_Int_NotNull_min_1
  token?: string
  superLike?: boolean
}

export type GQLamount_Int_NotNull_min_1 = any

export interface GQLReadArticleInput {
  id: string
}

export interface GQLPutTopicInput {
  id?: string
  title?: string
  description?: string
  cover?: string
  public?: boolean
  articles?: Array<string>
  chapters?: Array<string>
}

export interface GQLPutChapterInput {
  id?: string
  title?: string
  description?: string
  topic?: string
  articles?: Array<string>
}

export interface GQLDeleteTopicsInput {
  ids: Array<string>
}

export interface GQLSortTopicsInput {
  ids: Array<string>
}

export interface GQLPutTagInput {
  id?: string
  content?: string
  cover?: string
  description?: string
}

export interface GQLUpdateTagSettingInput {
  id: string
  type: GQLUpdateTagSettingType
  editors?: Array<string>
}

export const enum GQLUpdateTagSettingType {
  adopt = 'adopt',
  leave = 'leave',
  add_editor = 'add_editor',
  remove_editor = 'remove_editor',
  leave_editor = 'leave_editor',
}

export interface GQLAddArticlesTagsInput {
  id: string
  articles?: Array<string>
  selected?: boolean
}

export interface GQLUpdateArticlesTagsInput {
  id: string
  articles?: Array<string>
  isSelected: boolean
}

export interface GQLDeleteArticlesTagsInput {
  id: string
  articles?: Array<string>
}

export interface GQLToggleRecommendInput {
  id: string
  enabled: boolean
  type?: GQLRecommendTypes
}

/**
 * Enums for types of recommend articles.
 */
export const enum GQLRecommendTypes {
  icymi = 'icymi',
  hottest = 'hottest',
  newest = 'newest',
}

export interface GQLUpdateArticleStateInput {
  id: string
  state: GQLArticleState
}

export interface GQLUpdateArticleSensitiveInput {
  id: string
  sensitive: boolean
}

export interface GQLDeleteTagsInput {
  ids: Array<string>
}

export interface GQLRenameTagInput {
  id: string
  content: string
}

export interface GQLMergeTagsInput {
  ids: Array<string>
  content: string
}

export interface GQLPutCircleInput {
  /**
   * Unique ID.
   */
  id?: string

  /**
   * Unique ID of a Circle's avatar.
   */
  avatar?: string

  /**
   * Unique ID of a Circle's cover.
   */
  cover?: string

  /**
   * Slugified name of a Circle.
   */
  name?: string

  /**
   * Human readable name of this Circle.
   */
  displayName?: string

  /**
   * A short description of this Circle.
   */
  description?: string

  /**
   * Circle's subscription fee.
   */
  amount?: GQLamount_Float_exclusiveMin_0
}

export type GQLamount_Float_exclusiveMin_0 = any

export interface GQLSubscribeCircleInput {
  /**
   * Unique ID.
   */
  id: string

  /**
   * Wallet password.
   */
  password?: string
}

export interface GQLSubscribeCircleResult {
  circle: GQLCircle

  /**
   * client secret for SetupIntent.
   */
  client_secret?: string
}

export interface GQLUnsubscribeCircleInput {
  /**
   * Unique ID.
   */
  id: string
}

export interface GQLPutCircleArticlesInput {
  /**
   * Circle ID
   */
  id: string

  /**
   * Article Ids
   */
  articles?: Array<string>

  /**
   * Action Type
   */
  type: GQLPutCircleArticlesType

  /**
   * Access Type, `public` or `paywall` only.
   */
  accessType: GQLArticleAccessType
  license?: GQLArticleLicenseType
}

export const enum GQLPutCircleArticlesType {
  add = 'add',
  remove = 'remove',
}

export interface GQLInviteCircleInput {
  invitees: Array<GQLInviteCircleInvitee>
  freePeriod: GQLfreePeriod_Int_NotNull_exclusiveMin_0
  circleId: string
}

export interface GQLInviteCircleInvitee {
  id?: string
  email?: string
}

export type GQLfreePeriod_Int_NotNull_exclusiveMin_0 = any

export interface GQLPutCommentInput {
  comment: GQLCommentInput
  id?: string
}

export interface GQLCommentInput {
  content: string
  replyTo?: string
  parentId?: string
  mentions?: Array<string>
  type: GQLCommentType
  articleId?: string
  circleId?: string
}

export interface GQLDeleteCommentInput {
  id: string
}

export interface GQLVoteCommentInput {
  vote: GQLVote
  id: string
}

export interface GQLUnvoteCommentInput {
  id: string
}

export interface GQLUpdateCommentsStateInput {
  ids: Array<string>
  state: GQLCommentState
}

export interface GQLPinCommentInput {
  id: string
}

export interface GQLUnpinCommentInput {
  id: string
}

export interface GQLPutDraftInput {
  id?: string
  title?: string
  summary?: string
  content?: string
  tags?: Array<string>
  cover?: string
  collection?: Array<string | null>
  circle?: string
  accessType?: GQLArticleAccessType
  sensitive?: boolean
  license?: GQLArticleLicenseType
  requestForDonation?: GQLrequestForDonation_String_maxLength_140
  replyToDonator?: GQLreplyToDonator_String_maxLength_140

  /**
   * whether publish to ISCN
   */
  iscnPublish?: boolean

  /**
   * whether readers can comment
   */
  canComment?: boolean
}

export interface GQLDeleteDraftInput {
  id: string
}

export interface GQLSingleFileUploadInput {
  type: GQLAssetType
  file?: GQLUpload
  url?: GQLurl_String_format_uri
  draft?: boolean
  entityType: GQLEntityType
  entityId?: string
}

export type GQLUpload = any

export type GQLurl_String_format_uri = any

export const enum GQLEntityType {
  article = 'article',
  draft = 'draft',
  tag = 'tag',
  user = 'user',
  circle = 'circle',
  announcement = 'announcement',
  topic = 'topic',
  collection = 'collection',
}

export interface GQLDirectImageUploadInput {
  type: GQLAssetType
  mime?: string
  url?: GQLurl_String_format_uri
  draft?: boolean
  entityType: GQLEntityType
  entityId?: string
}

export interface GQLLogRecordInput {
  type: GQLLogRecordTypes
}

export const enum GQLLogRecordTypes {
  ReadFolloweeArticles = 'ReadFolloweeArticles',
  ReadFollowingFeed = 'ReadFollowingFeed',
  ReadResponseInfoPopUp = 'ReadResponseInfoPopUp',
}

export interface GQLKeywordInput {
  keyword: string
}

export interface GQLBlockedSearchKeyword {
  /**
   * Unique ID of bloked search keyword.
   */
  id: string

  /**
   * Types of this search keyword.
   */
  searchKey: string

  /**
   * Time of this search keyword was created.
   */
  createdAt: GQLDateTime
}

export interface GQLKeywordsInput {
  keywords?: Array<string>
}

export interface GQLSubmitReportInput {
  targetId: string
  reason: GQLReportReason
}

export interface GQLSetBoostInput {
  id: string
  boost: GQLboost_Float_NotNull_min_0
  type: GQLBoostTypes
}

export type GQLboost_Float_NotNull_min_0 = any

export const enum GQLBoostTypes {
  Article = 'Article',
  User = 'User',
  Tag = 'Tag',
}

export interface GQLPutRemarkInput {
  id: string
  remark: string
  type: GQLRemarkTypes
}

export const enum GQLRemarkTypes {
  Article = 'Article',
  User = 'User',
  Tag = 'Tag',
  Comment = 'Comment',
  Report = 'Report',
  Feedback = 'Feedback',
}

export interface GQLPutSkippedListItemInput {
  id?: string
  type?: GQLSkippedListItemType
  value?: string
  archived?: boolean
}

export interface GQLSetFeatureInput {
  name: GQLFeatureName
  flag: GQLFeatureFlag
}

export const enum GQLFeatureFlag {
  on = 'on',
  off = 'off',
  admin = 'admin',
  seeding = 'seeding',
}

export interface GQLToggleSeedingUsersInput {
  ids?: Array<string>
  enabled: boolean
}

export interface GQLPutAnnouncementInput {
  id?: string
  title?: string
  cover?: string
  content?: string
  link?: GQLlink_String_format_uri
  type?: GQLAnnouncementType
  expiredAt?: GQLDateTime
  visible?: boolean
  order?: number
  translations?: Array<GQLTranslatedAnnouncementInput>
}

export interface GQLTranslatedAnnouncementInput {
  language: GQLUserLanguage
  title?: string
  cover?: string
  content?: string
  link?: GQLlink_String_format_uri
}

export interface GQLDeleteAnnouncementsInput {
  ids?: Array<string>
}

export interface GQLPutRestrictedUsersInput {
  ids: Array<string>
  restrictions: Array<GQLUserRestrictionType>
}

export interface GQLPutIcymiTopicInput {
  id?: string
  title?: string
  articles?: Array<string>
  pinAmount?: number
  note?: string
  state?: GQLIcymiTopicState
}

export interface GQLSendVerificationCodeInput {
  email: GQLemail_String_NotNull_format_email
  type: GQLVerificationCodeType
  token?: string

  /**
   * Redirect URL embedded in the verification email,
   * use code instead if not provided.
   */
  redirectUrl?: GQLredirectUrl_String_format_uri

  /**
   * email content language
   */
  language?: GQLUserLanguage
}

export const enum GQLVerificationCodeType {
  register = 'register',
  email_verify = 'email_verify',
  email_otp = 'email_otp',

  /**
   *
   * @deprecated No longer in use
   */
  email_reset = 'email_reset',

  /**
   *
   * @deprecated No longer in use
   */
  email_reset_confirm = 'email_reset_confirm',

  /**
   *
   * @deprecated No longer in use
   */
  password_reset = 'password_reset',
  payment_password_reset = 'payment_password_reset',
}

export type GQLredirectUrl_String_format_uri = any

export interface GQLConfirmVerificationCodeInput {
  email: GQLemail_String_NotNull_format_email
  type: GQLVerificationCodeType
  code: string
}

export interface GQLResetPasswordInput {
  password: string
  codeId: string
  type?: GQLResetPasswordType
}

export const enum GQLResetPasswordType {
  account = 'account',
  payment = 'payment',
}

export interface GQLChangeEmailInput {
  oldEmail: GQLoldEmail_String_NotNull_format_email
  oldEmailCodeId: string
  newEmail: GQLnewEmail_String_NotNull_format_email
  newEmailCodeId: string
}

export type GQLoldEmail_String_NotNull_format_email = any

export type GQLnewEmail_String_NotNull_format_email = any

export interface GQLSetEmailInput {
  email: string
}

export interface GQLVerifyEmailInput {
  email: string
  code: string
}

export interface GQLAuthResult {
  auth: boolean
  token?: string
  type: GQLAuthResultType
  user?: GQLUser
}

export const enum GQLAuthResultType {
  Login = 'Login',
  Signup = 'Signup',
  LinkAccount = 'LinkAccount',
}

export interface GQLSetCurrencyInput {
  currency?: GQLQuoteCurrency
}

export interface GQLUserRegisterInput {
  email: GQLemail_String_NotNull_format_email
  userName?: string
  displayName: string
  password: string
  description?: string
  codeId: string
  referralCode?: string
}

export interface GQLUserLoginInput {
  email: GQLemail_String_NotNull_format_email
  password: string
}

export interface GQLEmailLoginInput {
  email: string
  passwordOrCode: string

  /**
   * used in register
   */
  language?: GQLUserLanguage
  referralCode?: string
}

export interface GQLGenerateSigningMessageInput {
  address: string
  purpose?: GQLSigningMessagePurpose
}

export const enum GQLSigningMessagePurpose {
  airdrop = 'airdrop',
  connect = 'connect',
  signup = 'signup',
  login = 'login',
  claimLogbook = 'claimLogbook',
}

export interface GQLSigningMessageResult {
  nonce: string
  purpose: GQLSigningMessagePurpose
  signingMessage: string
  createdAt: GQLDateTime
  expiredAt: GQLDateTime
}

export interface GQLWalletLoginInput {
  ethAddress: string

  /**
   * the message being sign'ed, including nonce
   */
  signedMessage: string

  /**
   * sign'ed by wallet
   */
  signature: string

  /**
   * nonce from generateSigningMessage
   */
  nonce: string

  /**
   * used in register
   */
  language?: GQLUserLanguage
  referralCode?: string
}

export interface GQLSocialLoginInput {
  type: GQLSocialAccountType
  authorizationCode?: string

  /**
   * OAuth2 PKCE code_verifier for Facebook and Twitter
   */
  codeVerifier?: string

  /**
   * OIDC nonce for Google
   */
  nonce?: string

  /**
   * oauth token/verifier in OAuth1.0a for Twitter
   */
  oauth1Credential?: GQLOauth1CredentialInput

  /**
   * used in register
   */
  language?: GQLUserLanguage
  referralCode?: string
}

export interface GQLOauth1CredentialInput {
  oauthToken: string
  oauthVerifier: string
}

export interface GQLRemoveSocialLoginInput {
  type: GQLSocialAccountType
}

export interface GQLResetWalletInput {
  id: string
}

export interface GQLResetLikerIdInput {
  id: string
}

export interface GQLUpdateUserInfoInput {
  displayName?: string
  avatar?: string
  description?: string
  language?: GQLUserLanguage
  agreeOn?: boolean
  profileCover?: string
  paymentPassword?: string
  paymentPointer?: string
  referralCode?: string
}

export interface GQLSetUserNameInput {
  userName: string
}

export interface GQLSetPasswordInput {
  password: string
}

export interface GQLUpdateNotificationSettingInput {
  type: GQLNotificationSettingType
  enabled: boolean
}

export const enum GQLNotificationSettingType {
  email = 'email',
  mention = 'mention',
  userNewFollower = 'userNewFollower',
  articleNewComment = 'articleNewComment',
  articleNewAppreciation = 'articleNewAppreciation',
  articleNewSubscription = 'articleNewSubscription',
  articleNewCollected = 'articleNewCollected',
  articleCommentPinned = 'articleCommentPinned',

  /**
   * for circle owners
   */
  circleNewSubscriber = 'circleNewSubscriber',
  circleNewFollower = 'circleNewFollower',
  circleNewUnsubscriber = 'circleNewUnsubscriber',
  circleNewDiscussion = 'circleNewDiscussion',
  circleMemberBroadcast = 'circleMemberBroadcast',
  circleMemberNewDiscussion = 'circleMemberNewDiscussion',
  circleMemberNewDiscussionReply = 'circleMemberNewDiscussionReply',
  circleMemberNewBroadcastReply = 'circleMemberNewBroadcastReply',

  /**
   * for circle members
   */
  inCircleNewArticle = 'inCircleNewArticle',
  inCircleNewBroadcast = 'inCircleNewBroadcast',
  inCircleNewBroadcastReply = 'inCircleNewBroadcastReply',
  inCircleNewDiscussion = 'inCircleNewDiscussion',
  inCircleNewDiscussionReply = 'inCircleNewDiscussionReply',
}

export interface GQLClearReadHistoryInput {
  id?: string
}

export interface GQLMigrationInput {
  type?: GQLMigrationType
  files: Array<GQLUpload | null>
}

export const enum GQLMigrationType {
  medium = 'medium',
}

export interface GQLClaimLogbooksInput {
  ethAddress: string

  /**
   * the message being sign'ed, including nonce
   */
  signedMessage: string

  /**
   * sign'ed by wallet
   */
  signature: string

  /**
   * nonce from generateSigningMessage
   */
  nonce: string
}

export interface GQLClaimLogbooksResult {
  ids?: Array<string>
  txHash: string
}

export interface GQLFeaturedTagsInput {
  /**
   *  tagIds
   */
  ids: Array<string>
}

export interface GQLUpdateUserStateInput {
  id?: string
  emails?: Array<string>
  state: GQLUserState
  banDays?: GQLbanDays_Int_exclusiveMin_0
  password?: string
}

export type GQLbanDays_Int_exclusiveMin_0 = any

export interface GQLUpdateUserRoleInput {
  id: string
  role: GQLUserRole
}

export interface GQLUpdateUserExtraInput {
  id: string
  referralCode?: string
}

export interface GQLRefreshIPNSFeedInput {
  userName: string

  /**
   * refresh how many recent articles, default to 50
   */
  numArticles?: number
}

export interface GQLToggleUsersBadgeInput {
  ids?: Array<string>
  type: GQLBadgeType
  enabled: boolean
}

export interface GQLUnbindLikerIdInput {
  id: string
  likerId: string
}

export interface GQLAddCreditInput {
  amount: GQLamount_Float_NotNull_exclusiveMin_0
}

export type GQLamount_Float_NotNull_exclusiveMin_0 = any

export interface GQLAddCreditResult {
  transaction: GQLTransaction

  /**
   * The client secret of this PaymentIntent.
   */
  client_secret: string
}

export interface GQLPayToInput {
  amount: GQLamount_Float_NotNull_exclusiveMin_0
  currency: GQLTransactionCurrency
  purpose: GQLTransactionPurpose
  recipientId: string
  targetId?: string

  /**
   * for HKD payment
   */
  password?: string

  /**
   * for ERC20/native token payment
   */
  chain?: GQLChain
  txHash?: string
}

export interface GQLPayToResult {
  transaction: GQLTransaction

  /**
   * Only available when paying with LIKE.
   */
  redirectUrl?: string
}

export interface GQLPayoutInput {
  amount: GQLamount_Float_NotNull_exclusiveMin_0
  password: string
}

export interface GQLConnectStripeAccountInput {
  country: GQLStripeAccountCountry
}

export const enum GQLStripeAccountCountry {
  Australia = 'Australia',
  Austria = 'Austria',
  Belgium = 'Belgium',
  Bulgaria = 'Bulgaria',
  Canada = 'Canada',
  Cyprus = 'Cyprus',
  Denmark = 'Denmark',
  Estonia = 'Estonia',
  Finland = 'Finland',
  France = 'France',
  Germany = 'Germany',
  Greece = 'Greece',
  HongKong = 'HongKong',
  Ireland = 'Ireland',
  Italy = 'Italy',
  Latvia = 'Latvia',
  Lithuania = 'Lithuania',
  Luxembourg = 'Luxembourg',
  Malta = 'Malta',
  Netherlands = 'Netherlands',
  NewZealand = 'NewZealand',
  Norway = 'Norway',
  Poland = 'Poland',
  Portugal = 'Portugal',
  Romania = 'Romania',
  Singapore = 'Singapore',
  Slovakia = 'Slovakia',
  Slovenia = 'Slovenia',
  Spain = 'Spain',
  Sweden = 'Sweden',
  UnitedKingdom = 'UnitedKingdom',
  UnitedStates = 'UnitedStates',
}

export interface GQLConnectStripeAccountResult {
  redirectUrl: string
}

export interface GQLPutOAuthClientInput {
  id?: string
  name?: string
  description?: string
  website?: GQLwebsite_String_format_uri
  scope?: Array<string>
  avatar?: string
  secret?: string
  redirectURIs?: Array<string>
  grantTypes?: Array<GQLGrantType>
  user?: string
}

export type GQLwebsite_String_format_uri = any

export interface GQLPutCollectionInput {
  id?: string
  title?: string
  cover?: string
  description?: string
  pinned?: boolean
}

export interface GQLDeleteCollectionsInput {
  ids: Array<string>
}

export interface GQLAddCollectionsArticlesInput {
  collections: Array<string>
  articles: Array<string>
}

export interface GQLDeleteCollectionArticlesInput {
  collection: string
  articles: Array<string>
}

export interface GQLReorderCollectionArticlesInput {
  collection: string
  moves: Array<GQLReorderMoveInput>
}

export interface GQLReorderMoveInput {
  item: string

  /**
   * The new position move to. To move item to the beginning of the list, set to 0.
   * To the end of the list, set to the length of the list - 1.
   */
  newPosition: number
}

export interface GQLArticleArticleNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * List of notice actors.
   */
  actors?: Array<GQLUser>
  type: GQLArticleArticleNoticeType
  target: GQLArticle
  article: GQLArticle
}

export const enum GQLArticleArticleNoticeType {
  ArticleNewCollected = 'ArticleNewCollected',
}

export interface GQLArticleNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * List of notice actors.
   */
  actors?: Array<GQLUser>
  type: GQLArticleNoticeType
  target: GQLArticle
}

export const enum GQLArticleNoticeType {
  ArticlePublished = 'ArticlePublished',
  ArticleMentionedYou = 'ArticleMentionedYou',
  ArticleNewSubscriber = 'ArticleNewSubscriber',
  ArticleNewAppreciation = 'ArticleNewAppreciation',
  RevisedArticlePublished = 'RevisedArticlePublished',
  RevisedArticleNotPublished = 'RevisedArticleNotPublished',
  CircleNewArticle = 'CircleNewArticle',
}

export const enum GQLCacheControlScope {
  PUBLIC = 'PUBLIC',
  PRIVATE = 'PRIVATE',
}

export interface GQLCircleNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * List of notice actors.
   */
  actors?: Array<GQLUser>
  type: GQLCircleNoticeType
  target: GQLCircle

  /**
   * Optional discussion/broadcast comments for bundled notices
   */
  comments?: Array<GQLComment>

  /**
   * Optional discussion/broadcast replies for bundled notices
   */
  replies?: Array<GQLComment>

  /**
   * Optional mention comments for bundled notices
   */
  mentions?: Array<GQLComment>
}

export const enum GQLCircleNoticeType {
  CircleInvitation = 'CircleInvitation',
  CircleNewSubscriber = 'CircleNewSubscriber',
  CircleNewFollower = 'CircleNewFollower',
  CircleNewUnsubscriber = 'CircleNewUnsubscriber',
  CircleNewBroadcastComments = 'CircleNewBroadcastComments',
  CircleNewDiscussionComments = 'CircleNewDiscussionComments',
}

export interface GQLCommentCommentNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * List of notice actors.
   */
  actors?: Array<GQLUser>
  type: GQLCommentCommentNoticeType
  target: GQLComment
  comment: GQLComment
}

export const enum GQLCommentCommentNoticeType {
  CommentNewReply = 'CommentNewReply',
}

export interface GQLCommentNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * List of notice actors.
   */
  actors?: Array<GQLUser>
  type: GQLCommentNoticeType
  target: GQLComment
}

export const enum GQLCommentNoticeType {
  CommentPinned = 'CommentPinned',
  CommentMentionedYou = 'CommentMentionedYou',
  ArticleNewComment = 'ArticleNewComment',
  SubscribedArticleNewComment = 'SubscribedArticleNewComment',
  CircleNewBroadcast = 'CircleNewBroadcast',
}

export const enum GQLCryptoWalletSignaturePurpose {
  airdrop = 'airdrop',
  connect = 'connect',
  signup = 'signup',
  login = 'login',
}

/**
 * The notice type contains info about official announcement.
 */
export interface GQLOfficialAnnouncementNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * The message content.
   */
  message: string

  /**
   * The link to a specific page if provided.
   */
  link?: string
}

/**
 * Enums for user roles.
 */
export const enum GQLRole {
  vistor = 'vistor',
  user = 'user',
  admin = 'admin',
}

export interface GQLToggleCircleMemberInput {
  /**
   * Unique ID.
   */
  id: string

  /**
   * Toggle value.
   */
  enabled: boolean

  /**
   * Unique ID of target user.
   */
  targetId: string
}

export interface GQLTransactionNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * List of notice actors.
   */
  actors?: Array<GQLUser>
  type: GQLTransactionNoticeType
  target: GQLTransaction
}

export const enum GQLTransactionNoticeType {
  PaymentReceivedDonation = 'PaymentReceivedDonation',
}

export const enum GQLUserInfoFields {
  displayName = 'displayName',
  avatar = 'avatar',
  description = 'description',
  email = 'email',
  agreeOn = 'agreeOn',
}

export interface GQLUserNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * List of notice actors.
   */
  actors?: Array<GQLUser>
  type: GQLUserNoticeType
  target: GQLUser
}

export const enum GQLUserNoticeType {
  UserNewFollower = 'UserNewFollower',
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver
  Article?: GQLArticleTypeResolver
  Node?: {
    __resolveType: GQLNodeTypeResolver
  }

  PinnableWork?: {
    __resolveType: GQLPinnableWorkTypeResolver
  }

  DateTime?: GraphQLScalarType
  User?: GQLUserTypeResolver
  Circle?: GQLCircleTypeResolver
  Price?: GQLPriceTypeResolver
  first_Int_min_0?: GraphQLScalarType
  random_Int_min_0_max_49?: GraphQLScalarType
  MemberConnection?: GQLMemberConnectionTypeResolver
  Connection?: {
    __resolveType: GQLConnectionTypeResolver
  }

  PageInfo?: GQLPageInfoTypeResolver
  MemberEdge?: GQLMemberEdgeTypeResolver
  Member?: GQLMemberTypeResolver
  UserConnection?: GQLUserConnectionTypeResolver
  UserEdge?: GQLUserEdgeTypeResolver
  ArticleConnection?: GQLArticleConnectionTypeResolver
  ArticleEdge?: GQLArticleEdgeTypeResolver
  Invites?: GQLInvitesTypeResolver
  InvitationConnection?: GQLInvitationConnectionTypeResolver
  InvitationEdge?: GQLInvitationEdgeTypeResolver
  Invitation?: GQLInvitationTypeResolver
  Invitee?: {
    __resolveType: GQLInviteeTypeResolver
  }

  Person?: GQLPersonTypeResolver
  email_String_NotNull_format_email?: GraphQLScalarType
  CircleAnalytics?: GQLCircleAnalyticsTypeResolver
  CircleIncomeAnalytics?: GQLCircleIncomeAnalyticsTypeResolver
  MonthlyDatum?: GQLMonthlyDatumTypeResolver
  CircleSubscriberAnalytics?: GQLCircleSubscriberAnalyticsTypeResolver
  CircleFollowerAnalytics?: GQLCircleFollowerAnalyticsTypeResolver
  CircleContentAnalytics?: GQLCircleContentAnalyticsTypeResolver
  CircleContentAnalyticsDatum?: GQLCircleContentAnalyticsDatumTypeResolver
  CommentConnection?: GQLCommentConnectionTypeResolver
  CommentEdge?: GQLCommentEdgeTypeResolver
  Comment?: GQLCommentTypeResolver
  CircleConnection?: GQLCircleConnectionTypeResolver
  CircleEdge?: GQLCircleEdgeTypeResolver
  NoticeConnection?: GQLNoticeConnectionTypeResolver
  NoticeEdge?: GQLNoticeEdgeTypeResolver
  Notice?: {
    __resolveType: GQLNoticeTypeResolver
  }

  Liker?: GQLLikerTypeResolver
  UserInfo?: GQLUserInfoTypeResolver
  email_String_format_email?: GraphQLScalarType
  SocialAccount?: GQLSocialAccountTypeResolver
  Badge?: GQLBadgeTypeResolver
  CryptoWallet?: GQLCryptoWalletTypeResolver
  NFTAsset?: GQLNFTAssetTypeResolver
  Tag?: GQLTagTypeResolver
  TagConnection?: GQLTagConnectionTypeResolver
  TagEdge?: GQLTagEdgeTypeResolver
  TagOSS?: GQLTagOSSTypeResolver
  UserSettings?: GQLUserSettingsTypeResolver
  NotificationSetting?: GQLNotificationSettingTypeResolver
  Recommendation?: GQLRecommendationTypeResolver
  FollowingActivityConnection?: GQLFollowingActivityConnectionTypeResolver
  FollowingActivityEdge?: GQLFollowingActivityEdgeTypeResolver
  FollowingActivity?: {
    __resolveType: GQLFollowingActivityTypeResolver
  }

  UserPublishArticleActivity?: GQLUserPublishArticleActivityTypeResolver
  UserAddArticleTagActivity?: GQLUserAddArticleTagActivityTypeResolver
  UserBroadcastCircleActivity?: GQLUserBroadcastCircleActivityTypeResolver
  UserCreateCircleActivity?: GQLUserCreateCircleActivityTypeResolver
  UserRecommendationActivity?: GQLUserRecommendationActivityTypeResolver
  ArticleRecommendationActivity?: GQLArticleRecommendationActivityTypeResolver
  CircleRecommendationActivity?: GQLCircleRecommendationActivityTypeResolver
  IcymiTopic?: GQLIcymiTopicTypeResolver
  TopicConnection?: GQLTopicConnectionTypeResolver
  TopicEdge?: GQLTopicEdgeTypeResolver
  Topic?: GQLTopicTypeResolver
  Chapter?: GQLChapterTypeResolver
  CollectionConnection?: GQLCollectionConnectionTypeResolver
  CollectionEdge?: GQLCollectionEdgeTypeResolver
  Collection?: GQLCollectionTypeResolver
  DraftConnection?: GQLDraftConnectionTypeResolver
  DraftEdge?: GQLDraftEdgeTypeResolver
  Draft?: GQLDraftTypeResolver
  Asset?: GQLAssetTypeResolver
  DraftAccess?: GQLDraftAccessTypeResolver
  UserActivity?: GQLUserActivityTypeResolver
  ReadHistoryConnection?: GQLReadHistoryConnectionTypeResolver
  ReadHistoryEdge?: GQLReadHistoryEdgeTypeResolver
  ReadHistory?: GQLReadHistoryTypeResolver
  RecentSearchConnection?: GQLRecentSearchConnectionTypeResolver
  RecentSearchEdge?: GQLRecentSearchEdgeTypeResolver
  AppreciationConnection?: GQLAppreciationConnectionTypeResolver
  AppreciationEdge?: GQLAppreciationEdgeTypeResolver
  Appreciation?: GQLAppreciationTypeResolver
  Following?: GQLFollowingTypeResolver
  UserAnalytics?: GQLUserAnalyticsTypeResolver
  TopDonatorConnection?: GQLTopDonatorConnectionTypeResolver
  TopDonatorEdge?: GQLTopDonatorEdgeTypeResolver
  UserStatus?: GQLUserStatusTypeResolver
  UserOSS?: GQLUserOSSTypeResolver
  UserRestriction?: GQLUserRestrictionTypeResolver
  Wallet?: GQLWalletTypeResolver
  Balance?: GQLBalanceTypeResolver
  TransactionConnection?: GQLTransactionConnectionTypeResolver
  TransactionEdge?: GQLTransactionEdgeTypeResolver
  Transaction?: GQLTransactionTypeResolver
  TransactionTarget?: {
    __resolveType: GQLTransactionTargetTypeResolver
  }

  BlockchainTransaction?: GQLBlockchainTransactionTypeResolver
  StripeAccount?: GQLStripeAccountTypeResolver
  ArticleContents?: GQLArticleContentsTypeResolver
  ArticleTranslation?: GQLArticleTranslationTypeResolver
  ArticleDonationConnection?: GQLArticleDonationConnectionTypeResolver
  ArticleDonationEdge?: GQLArticleDonationEdgeTypeResolver
  ArticleDonation?: GQLArticleDonationTypeResolver
  ArticleAccess?: GQLArticleAccessTypeResolver
  ArticleVersionsConnection?: GQLArticleVersionsConnectionTypeResolver
  ArticleVersionEdge?: GQLArticleVersionEdgeTypeResolver
  ArticleVersion?: GQLArticleVersionTypeResolver
  ArticleOSS?: GQLArticleOSSTypeResolver
  ResponseConnection?: GQLResponseConnectionTypeResolver
  ResponseEdge?: GQLResponseEdgeTypeResolver
  Response?: {
    __resolveType: GQLResponseTypeResolver
  }

  SearchResultConnection?: GQLSearchResultConnectionTypeResolver
  SearchResultEdge?: GQLSearchResultEdgeTypeResolver
  Official?: GQLOfficialTypeResolver
  Feature?: GQLFeatureTypeResolver
  Announcement?: GQLAnnouncementTypeResolver
  TranslatedAnnouncement?: GQLTranslatedAnnouncementTypeResolver
  link_String_format_uri?: GraphQLScalarType
  OSS?: GQLOSSTypeResolver
  OAuthClientConnection?: GQLOAuthClientConnectionTypeResolver
  OAuthClientEdge?: GQLOAuthClientEdgeTypeResolver
  OAuthClient?: GQLOAuthClientTypeResolver
  SkippedListItemsConnection?: GQLSkippedListItemsConnectionTypeResolver
  SkippedListItemEdge?: GQLSkippedListItemEdgeTypeResolver
  SkippedListItem?: GQLSkippedListItemTypeResolver
  ReportConnection?: GQLReportConnectionTypeResolver
  ReportEdge?: GQLReportEdgeTypeResolver
  Report?: GQLReportTypeResolver
  IcymiTopicConnection?: GQLIcymiTopicConnectionTypeResolver
  IcymiTopicEdge?: GQLIcymiTopicEdgeTypeResolver
  ExchangeRate?: GQLExchangeRateTypeResolver
  Mutation?: GQLMutationTypeResolver
  requestForDonation_String_maxLength_140?: GraphQLScalarType
  replyToDonator_String_maxLength_140?: GraphQLScalarType
  description_String_maxLength_140?: GraphQLScalarType
  amount_Int_NotNull_min_1?: GraphQLScalarType
  amount_Float_exclusiveMin_0?: GraphQLScalarType
  SubscribeCircleResult?: GQLSubscribeCircleResultTypeResolver
  freePeriod_Int_NotNull_exclusiveMin_0?: GraphQLScalarType
  Upload?: GraphQLScalarType
  url_String_format_uri?: GraphQLScalarType
  BlockedSearchKeyword?: GQLBlockedSearchKeywordTypeResolver
  boost_Float_NotNull_min_0?: GraphQLScalarType
  redirectUrl_String_format_uri?: GraphQLScalarType
  oldEmail_String_NotNull_format_email?: GraphQLScalarType
  newEmail_String_NotNull_format_email?: GraphQLScalarType
  AuthResult?: GQLAuthResultTypeResolver
  SigningMessageResult?: GQLSigningMessageResultTypeResolver
  ClaimLogbooksResult?: GQLClaimLogbooksResultTypeResolver
  banDays_Int_exclusiveMin_0?: GraphQLScalarType
  amount_Float_NotNull_exclusiveMin_0?: GraphQLScalarType
  AddCreditResult?: GQLAddCreditResultTypeResolver
  PayToResult?: GQLPayToResultTypeResolver
  ConnectStripeAccountResult?: GQLConnectStripeAccountResultTypeResolver
  website_String_format_uri?: GraphQLScalarType
  ArticleArticleNotice?: GQLArticleArticleNoticeTypeResolver
  ArticleNotice?: GQLArticleNoticeTypeResolver
  CircleNotice?: GQLCircleNoticeTypeResolver
  CommentCommentNotice?: GQLCommentCommentNoticeTypeResolver
  CommentNotice?: GQLCommentNoticeTypeResolver
  OfficialAnnouncementNotice?: GQLOfficialAnnouncementNoticeTypeResolver
  TransactionNotice?: GQLTransactionNoticeTypeResolver
  UserNotice?: GQLUserNoticeTypeResolver
}
export interface GQLQueryTypeResolver<TParent = any> {
  article?: QueryToArticleResolver<TParent>
  circle?: QueryToCircleResolver<TParent>
  node?: QueryToNodeResolver<TParent>
  nodes?: QueryToNodesResolver<TParent>
  frequentSearch?: QueryToFrequentSearchResolver<TParent>
  search?: QueryToSearchResolver<TParent>
  official?: QueryToOfficialResolver<TParent>
  oss?: QueryToOssResolver<TParent>
  viewer?: QueryToViewerResolver<TParent>
  user?: QueryToUserResolver<TParent>
  oauthRequestToken?: QueryToOauthRequestTokenResolver<TParent>
  exchangeRates?: QueryToExchangeRatesResolver<TParent>
  oauthClient?: QueryToOauthClientResolver<TParent>
}

export interface QueryToArticleArgs {
  input: GQLArticleInput
}
export interface QueryToArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToArticleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToCircleArgs {
  input: GQLCircleInput
}
export interface QueryToCircleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToCircleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToNodeArgs {
  input: GQLNodeInput
}
export interface QueryToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToNodeArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToNodesArgs {
  input: GQLNodesInput
}
export interface QueryToNodesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToNodesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFrequentSearchArgs {
  input: GQLFrequentSearchInput
}
export interface QueryToFrequentSearchResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToFrequentSearchArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchArgs {
  input: GQLSearchInput
}
export interface QueryToSearchResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToSearchArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToOfficialResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToOssResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToViewerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToUserArgs {
  input: GQLUserInput
}
export interface QueryToUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToUserArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToOauthRequestTokenResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToExchangeRatesArgs {
  input?: GQLExchangeRatesInput
}
export interface QueryToExchangeRatesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToExchangeRatesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToOauthClientArgs {
  input: GQLOAuthClientInput
}
export interface QueryToOauthClientResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToOauthClientArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleTypeResolver<TParent = any> {
  id?: ArticleToIdResolver<TParent>
  topicScore?: ArticleToTopicScoreResolver<TParent>
  slug?: ArticleToSlugResolver<TParent>
  createdAt?: ArticleToCreatedAtResolver<TParent>
  revisedAt?: ArticleToRevisedAtResolver<TParent>
  state?: ArticleToStateResolver<TParent>
  author?: ArticleToAuthorResolver<TParent>
  title?: ArticleToTitleResolver<TParent>
  cover?: ArticleToCoverResolver<TParent>
  assets?: ArticleToAssetsResolver<TParent>
  summary?: ArticleToSummaryResolver<TParent>
  summaryCustomized?: ArticleToSummaryCustomizedResolver<TParent>
  tags?: ArticleToTagsResolver<TParent>
  wordCount?: ArticleToWordCountResolver<TParent>
  dataHash?: ArticleToDataHashResolver<TParent>
  mediaHash?: ArticleToMediaHashResolver<TParent>
  shortHash?: ArticleToShortHashResolver<TParent>
  content?: ArticleToContentResolver<TParent>
  contents?: ArticleToContentsResolver<TParent>
  language?: ArticleToLanguageResolver<TParent>
  collectedBy?: ArticleToCollectedByResolver<TParent>
  collection?: ArticleToCollectionResolver<TParent>
  relatedArticles?: ArticleToRelatedArticlesResolver<TParent>
  relatedDonationArticles?: ArticleToRelatedDonationArticlesResolver<TParent>
  appreciationsReceived?: ArticleToAppreciationsReceivedResolver<TParent>
  appreciationsReceivedTotal?: ArticleToAppreciationsReceivedTotalResolver<
    TParent
  >
  donationCount?: ArticleToDonationCountResolver<TParent>
  readerCount?: ArticleToReaderCountResolver<TParent>
  subscribers?: ArticleToSubscribersResolver<TParent>
  appreciateLimit?: ArticleToAppreciateLimitResolver<TParent>
  appreciateLeft?: ArticleToAppreciateLeftResolver<TParent>
  hasAppreciate?: ArticleToHasAppreciateResolver<TParent>
  canSuperLike?: ArticleToCanSuperLikeResolver<TParent>
  subscribed?: ArticleToSubscribedResolver<TParent>
  sticky?: ArticleToStickyResolver<TParent>
  pinned?: ArticleToPinnedResolver<TParent>
  translation?: ArticleToTranslationResolver<TParent>
  availableTranslations?: ArticleToAvailableTranslationsResolver<TParent>
  transactionsReceivedBy?: ArticleToTransactionsReceivedByResolver<TParent>
  donations?: ArticleToDonationsResolver<TParent>
  readTime?: ArticleToReadTimeResolver<TParent>
  drafts?: ArticleToDraftsResolver<TParent>
  newestUnpublishedDraft?: ArticleToNewestUnpublishedDraftResolver<TParent>
  newestPublishedDraft?: ArticleToNewestPublishedDraftResolver<TParent>
  revisionCount?: ArticleToRevisionCountResolver<TParent>
  access?: ArticleToAccessResolver<TParent>
  sensitiveByAuthor?: ArticleToSensitiveByAuthorResolver<TParent>
  sensitiveByAdmin?: ArticleToSensitiveByAdminResolver<TParent>
  license?: ArticleToLicenseResolver<TParent>
  requestForDonation?: ArticleToRequestForDonationResolver<TParent>
  replyToDonator?: ArticleToReplyToDonatorResolver<TParent>
  iscnId?: ArticleToIscnIdResolver<TParent>
  canComment?: ArticleToCanCommentResolver<TParent>
  versions?: ArticleToVersionsResolver<TParent>
  oss?: ArticleToOssResolver<TParent>
  remark?: ArticleToRemarkResolver<TParent>
  commentCount?: ArticleToCommentCountResolver<TParent>
  pinCommentLimit?: ArticleToPinCommentLimitResolver<TParent>
  pinCommentLeft?: ArticleToPinCommentLeftResolver<TParent>
  pinnedComments?: ArticleToPinnedCommentsResolver<TParent>
  featuredComments?: ArticleToFeaturedCommentsResolver<TParent>
  comments?: ArticleToCommentsResolver<TParent>
  responseCount?: ArticleToResponseCountResolver<TParent>
  responses?: ArticleToResponsesResolver<TParent>
}

export interface ArticleToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToTopicScoreResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToSlugResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToRevisedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToStateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToAuthorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToTitleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToCoverResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToAssetsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToSummaryResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToSummaryCustomizedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToWordCountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToDataHashResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToMediaHashResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToShortHashResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToContentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToContentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToLanguageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToCollectedByArgs {
  input: GQLConnectionArgs
}
export interface ArticleToCollectedByResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToCollectedByArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToCollectionArgs {
  input: GQLConnectionArgs
}
export interface ArticleToCollectionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToCollectionArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToRelatedArticlesArgs {
  input: GQLConnectionArgs
}
export interface ArticleToRelatedArticlesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: ArticleToRelatedArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToRelatedDonationArticlesArgs {
  input: GQLRelatedDonationArticlesInput
}
export interface ArticleToRelatedDonationArticlesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: ArticleToRelatedDonationArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToAppreciationsReceivedArgs {
  input: GQLConnectionArgs
}
export interface ArticleToAppreciationsReceivedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: ArticleToAppreciationsReceivedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToAppreciationsReceivedTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToDonationCountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToReaderCountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToSubscribersArgs {
  input: GQLConnectionArgs
}
export interface ArticleToSubscribersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToSubscribersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToAppreciateLimitResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToAppreciateLeftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToHasAppreciateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToCanSuperLikeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToSubscribedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToStickyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToPinnedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToTranslationArgs {
  input?: GQLTranslationArgs
}
export interface ArticleToTranslationResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToTranslationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToAvailableTranslationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToTransactionsReceivedByArgs {
  input: GQLTransactionsReceivedByArgs
}
export interface ArticleToTransactionsReceivedByResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: ArticleToTransactionsReceivedByArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToDonationsArgs {
  input: GQLConnectionArgs
}
export interface ArticleToDonationsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToDonationsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToReadTimeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToDraftsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToNewestUnpublishedDraftResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToNewestPublishedDraftResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToRevisionCountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToAccessResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToSensitiveByAuthorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToSensitiveByAdminResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToLicenseResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToRequestForDonationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToReplyToDonatorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToIscnIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToCanCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToVersionsArgs {
  input: GQLArticleVersionsInput
}
export interface ArticleToVersionsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToVersionsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToOssResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToRemarkResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToCommentCountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToPinCommentLimitResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToPinCommentLeftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToPinnedCommentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToFeaturedCommentsArgs {
  input: GQLFeaturedCommentsInput
}
export interface ArticleToFeaturedCommentsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: ArticleToFeaturedCommentsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToCommentsArgs {
  input: GQLCommentsInput
}
export interface ArticleToCommentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToCommentsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToResponseCountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToResponsesArgs {
  input: GQLResponsesInput
}
export interface ArticleToResponsesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToResponsesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLNodeTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'Article'
    | 'User'
    | 'Circle'
    | 'Comment'
    | 'Tag'
    | 'IcymiTopic'
    | 'Topic'
    | 'Chapter'
    | 'Collection'
    | 'Draft'
    | 'ArticleVersion'
    | 'Report'
    | Promise<
        | 'Article'
        | 'User'
        | 'Circle'
        | 'Comment'
        | 'Tag'
        | 'IcymiTopic'
        | 'Topic'
        | 'Chapter'
        | 'Collection'
        | 'Draft'
        | 'ArticleVersion'
        | 'Report'
      >
}
export interface GQLPinnableWorkTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'Article'
    | 'Collection'
    | Promise<'Article' | 'Collection'>
}
export interface GQLUserTypeResolver<TParent = any> {
  ownCircles?: UserToOwnCirclesResolver<TParent>
  subscribedCircles?: UserToSubscribedCirclesResolver<TParent>
  notices?: UserToNoticesResolver<TParent>
  id?: UserToIdResolver<TParent>
  userName?: UserToUserNameResolver<TParent>
  displayName?: UserToDisplayNameResolver<TParent>
  likerId?: UserToLikerIdResolver<TParent>
  liker?: UserToLikerResolver<TParent>
  avatar?: UserToAvatarResolver<TParent>
  info?: UserToInfoResolver<TParent>
  settings?: UserToSettingsResolver<TParent>
  recommendation?: UserToRecommendationResolver<TParent>
  articles?: UserToArticlesResolver<TParent>
  topics?: UserToTopicsResolver<TParent>
  collections?: UserToCollectionsResolver<TParent>
  latestWorks?: UserToLatestWorksResolver<TParent>
  pinnedWorks?: UserToPinnedWorksResolver<TParent>
  tags?: UserToTagsResolver<TParent>
  maintainedTags?: UserToMaintainedTagsResolver<TParent>
  pinnedTags?: UserToPinnedTagsResolver<TParent>
  drafts?: UserToDraftsResolver<TParent>
  commentedArticles?: UserToCommentedArticlesResolver<TParent>
  subscriptions?: UserToSubscriptionsResolver<TParent>
  activity?: UserToActivityResolver<TParent>
  followers?: UserToFollowersResolver<TParent>
  following?: UserToFollowingResolver<TParent>
  isFollower?: UserToIsFollowerResolver<TParent>
  isFollowee?: UserToIsFolloweeResolver<TParent>
  blockList?: UserToBlockListResolver<TParent>
  isBlocking?: UserToIsBlockingResolver<TParent>
  isBlocked?: UserToIsBlockedResolver<TParent>
  analytics?: UserToAnalyticsResolver<TParent>
  status?: UserToStatusResolver<TParent>
  oss?: UserToOssResolver<TParent>
  remark?: UserToRemarkResolver<TParent>
  wallet?: UserToWalletResolver<TParent>
  paymentPointer?: UserToPaymentPointerResolver<TParent>
}

export interface UserToOwnCirclesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToSubscribedCirclesArgs {
  input: GQLConnectionArgs
}
export interface UserToSubscribedCirclesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToSubscribedCirclesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToNoticesArgs {
  input: GQLConnectionArgs
}
export interface UserToNoticesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToNoticesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToUserNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToDisplayNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToLikerIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToLikerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToAvatarResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToInfoResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToSettingsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToRecommendationResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToArticlesArgs {
  input: GQLUserArticlesInput
}
export interface UserToArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToTopicsArgs {
  input: GQLTopicInput
}
export interface UserToTopicsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToTopicsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToCollectionsArgs {
  input: GQLConnectionArgs
}
export interface UserToCollectionsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToCollectionsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToLatestWorksResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToPinnedWorksResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToTagsArgs {
  input: GQLConnectionArgs
}
export interface UserToTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToMaintainedTagsArgs {
  input: GQLConnectionArgs
}
export interface UserToMaintainedTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToMaintainedTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToPinnedTagsArgs {
  input: GQLConnectionArgs
}
export interface UserToPinnedTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToPinnedTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToDraftsArgs {
  input: GQLConnectionArgs
}
export interface UserToDraftsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToDraftsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToCommentedArticlesArgs {
  input: GQLConnectionArgs
}
export interface UserToCommentedArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToCommentedArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToSubscriptionsArgs {
  input: GQLConnectionArgs
}
export interface UserToSubscriptionsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToSubscriptionsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToActivityResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToFollowersArgs {
  input: GQLConnectionArgs
}
export interface UserToFollowersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToFollowersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToFollowingResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToIsFollowerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToIsFolloweeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToBlockListArgs {
  input: GQLConnectionArgs
}
export interface UserToBlockListResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToBlockListArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToIsBlockingResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToIsBlockedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToAnalyticsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToStatusResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToOssResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToRemarkResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToWalletResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToPaymentPointerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCircleTypeResolver<TParent = any> {
  id?: CircleToIdResolver<TParent>
  avatar?: CircleToAvatarResolver<TParent>
  cover?: CircleToCoverResolver<TParent>
  name?: CircleToNameResolver<TParent>
  displayName?: CircleToDisplayNameResolver<TParent>
  description?: CircleToDescriptionResolver<TParent>
  prices?: CircleToPricesResolver<TParent>
  owner?: CircleToOwnerResolver<TParent>
  members?: CircleToMembersResolver<TParent>
  followers?: CircleToFollowersResolver<TParent>
  works?: CircleToWorksResolver<TParent>
  state?: CircleToStateResolver<TParent>
  createdAt?: CircleToCreatedAtResolver<TParent>
  updatedAt?: CircleToUpdatedAtResolver<TParent>
  isFollower?: CircleToIsFollowerResolver<TParent>
  isMember?: CircleToIsMemberResolver<TParent>
  invites?: CircleToInvitesResolver<TParent>
  invitedBy?: CircleToInvitedByResolver<TParent>
  analytics?: CircleToAnalyticsResolver<TParent>
  broadcast?: CircleToBroadcastResolver<TParent>
  pinnedBroadcast?: CircleToPinnedBroadcastResolver<TParent>
  discussion?: CircleToDiscussionResolver<TParent>
  discussionThreadCount?: CircleToDiscussionThreadCountResolver<TParent>
  discussionCount?: CircleToDiscussionCountResolver<TParent>
}

export interface CircleToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToAvatarResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToCoverResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToDisplayNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToDescriptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToPricesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToOwnerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToMembersArgs {
  input: GQLConnectionArgs
}
export interface CircleToMembersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: CircleToMembersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToFollowersArgs {
  input: GQLConnectionArgs
}
export interface CircleToFollowersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: CircleToFollowersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToWorksArgs {
  input: GQLConnectionArgs
}
export interface CircleToWorksResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: CircleToWorksArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToStateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToUpdatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToIsFollowerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToIsMemberResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToInvitesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToInvitedByResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToAnalyticsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToBroadcastArgs {
  input: GQLCommentsInput
}
export interface CircleToBroadcastResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: CircleToBroadcastArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToPinnedBroadcastResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToDiscussionArgs {
  input: GQLCommentsInput
}
export interface CircleToDiscussionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: CircleToDiscussionArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToDiscussionThreadCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleToDiscussionCountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLPriceTypeResolver<TParent = any> {
  id?: PriceToIdResolver<TParent>
  amount?: PriceToAmountResolver<TParent>
  circle?: PriceToCircleResolver<TParent>
  currency?: PriceToCurrencyResolver<TParent>
  state?: PriceToStateResolver<TParent>
  createdAt?: PriceToCreatedAtResolver<TParent>
  updatedAt?: PriceToUpdatedAtResolver<TParent>
}

export interface PriceToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PriceToAmountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PriceToCircleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PriceToCurrencyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PriceToStateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PriceToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PriceToUpdatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLMemberConnectionTypeResolver<TParent = any> {
  totalCount?: MemberConnectionToTotalCountResolver<TParent>
  pageInfo?: MemberConnectionToPageInfoResolver<TParent>
  edges?: MemberConnectionToEdgesResolver<TParent>
}

export interface MemberConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MemberConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MemberConnectionToEdgesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLConnectionTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'MemberConnection'
    | 'UserConnection'
    | 'ArticleConnection'
    | 'InvitationConnection'
    | 'CommentConnection'
    | 'CircleConnection'
    | 'NoticeConnection'
    | 'TagConnection'
    | 'FollowingActivityConnection'
    | 'TopicConnection'
    | 'CollectionConnection'
    | 'DraftConnection'
    | 'ReadHistoryConnection'
    | 'RecentSearchConnection'
    | 'AppreciationConnection'
    | 'TopDonatorConnection'
    | 'TransactionConnection'
    | 'ArticleVersionsConnection'
    | 'ResponseConnection'
    | 'SearchResultConnection'
    | 'OAuthClientConnection'
    | 'SkippedListItemsConnection'
    | 'ReportConnection'
    | 'IcymiTopicConnection'
    | Promise<
        | 'MemberConnection'
        | 'UserConnection'
        | 'ArticleConnection'
        | 'InvitationConnection'
        | 'CommentConnection'
        | 'CircleConnection'
        | 'NoticeConnection'
        | 'TagConnection'
        | 'FollowingActivityConnection'
        | 'TopicConnection'
        | 'CollectionConnection'
        | 'DraftConnection'
        | 'ReadHistoryConnection'
        | 'RecentSearchConnection'
        | 'AppreciationConnection'
        | 'TopDonatorConnection'
        | 'TransactionConnection'
        | 'ArticleVersionsConnection'
        | 'ResponseConnection'
        | 'SearchResultConnection'
        | 'OAuthClientConnection'
        | 'SkippedListItemsConnection'
        | 'ReportConnection'
        | 'IcymiTopicConnection'
      >
}
export interface GQLPageInfoTypeResolver<TParent = any> {
  startCursor?: PageInfoToStartCursorResolver<TParent>
  endCursor?: PageInfoToEndCursorResolver<TParent>
  hasNextPage?: PageInfoToHasNextPageResolver<TParent>
  hasPreviousPage?: PageInfoToHasPreviousPageResolver<TParent>
}

export interface PageInfoToStartCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PageInfoToEndCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PageInfoToHasPreviousPageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLMemberEdgeTypeResolver<TParent = any> {
  cursor?: MemberEdgeToCursorResolver<TParent>
  node?: MemberEdgeToNodeResolver<TParent>
}

export interface MemberEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MemberEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLMemberTypeResolver<TParent = any> {
  user?: MemberToUserResolver<TParent>
  price?: MemberToPriceResolver<TParent>
}

export interface MemberToUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MemberToPriceResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserConnectionTypeResolver<TParent = any> {
  totalCount?: UserConnectionToTotalCountResolver<TParent>
  pageInfo?: UserConnectionToPageInfoResolver<TParent>
  edges?: UserConnectionToEdgesResolver<TParent>
}

export interface UserConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserConnectionToEdgesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserEdgeTypeResolver<TParent = any> {
  cursor?: UserEdgeToCursorResolver<TParent>
  node?: UserEdgeToNodeResolver<TParent>
}

export interface UserEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleConnectionTypeResolver<TParent = any> {
  totalCount?: ArticleConnectionToTotalCountResolver<TParent>
  pageInfo?: ArticleConnectionToPageInfoResolver<TParent>
  edges?: ArticleConnectionToEdgesResolver<TParent>
}

export interface ArticleConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleEdgeTypeResolver<TParent = any> {
  cursor?: ArticleEdgeToCursorResolver<TParent>
  node?: ArticleEdgeToNodeResolver<TParent>
}

export interface ArticleEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLInvitesTypeResolver<TParent = any> {
  accepted?: InvitesToAcceptedResolver<TParent>
  pending?: InvitesToPendingResolver<TParent>
}

export interface InvitesToAcceptedArgs {
  input: GQLConnectionArgs
}
export interface InvitesToAcceptedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: InvitesToAcceptedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface InvitesToPendingArgs {
  input: GQLConnectionArgs
}
export interface InvitesToPendingResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: InvitesToPendingArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLInvitationConnectionTypeResolver<TParent = any> {
  totalCount?: InvitationConnectionToTotalCountResolver<TParent>
  pageInfo?: InvitationConnectionToPageInfoResolver<TParent>
  edges?: InvitationConnectionToEdgesResolver<TParent>
}

export interface InvitationConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface InvitationConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface InvitationConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLInvitationEdgeTypeResolver<TParent = any> {
  cursor?: InvitationEdgeToCursorResolver<TParent>
  node?: InvitationEdgeToNodeResolver<TParent>
}

export interface InvitationEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface InvitationEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLInvitationTypeResolver<TParent = any> {
  id?: InvitationToIdResolver<TParent>
  invitee?: InvitationToInviteeResolver<TParent>
  inviter?: InvitationToInviterResolver<TParent>
  circle?: InvitationToCircleResolver<TParent>
  freePeriod?: InvitationToFreePeriodResolver<TParent>
  createdAt?: InvitationToCreatedAtResolver<TParent>
  sentAt?: InvitationToSentAtResolver<TParent>
  acceptedAt?: InvitationToAcceptedAtResolver<TParent>
  state?: InvitationToStateResolver<TParent>
}

export interface InvitationToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface InvitationToInviteeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface InvitationToInviterResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface InvitationToCircleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface InvitationToFreePeriodResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface InvitationToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface InvitationToSentAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface InvitationToAcceptedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface InvitationToStateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLInviteeTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'Person'
    | 'User'
    | Promise<'Person' | 'User'>
}
export interface GQLPersonTypeResolver<TParent = any> {
  email?: PersonToEmailResolver<TParent>
}

export interface PersonToEmailResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCircleAnalyticsTypeResolver<TParent = any> {
  income?: CircleAnalyticsToIncomeResolver<TParent>
  subscriber?: CircleAnalyticsToSubscriberResolver<TParent>
  follower?: CircleAnalyticsToFollowerResolver<TParent>
  content?: CircleAnalyticsToContentResolver<TParent>
}

export interface CircleAnalyticsToIncomeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleAnalyticsToSubscriberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleAnalyticsToFollowerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleAnalyticsToContentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCircleIncomeAnalyticsTypeResolver<TParent = any> {
  history?: CircleIncomeAnalyticsToHistoryResolver<TParent>
  total?: CircleIncomeAnalyticsToTotalResolver<TParent>
  thisMonth?: CircleIncomeAnalyticsToThisMonthResolver<TParent>
  nextMonth?: CircleIncomeAnalyticsToNextMonthResolver<TParent>
}

export interface CircleIncomeAnalyticsToHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleIncomeAnalyticsToTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleIncomeAnalyticsToThisMonthResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleIncomeAnalyticsToNextMonthResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLMonthlyDatumTypeResolver<TParent = any> {
  value?: MonthlyDatumToValueResolver<TParent>
  date?: MonthlyDatumToDateResolver<TParent>
}

export interface MonthlyDatumToValueResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MonthlyDatumToDateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCircleSubscriberAnalyticsTypeResolver<TParent = any> {
  subscriberHistory?: CircleSubscriberAnalyticsToSubscriberHistoryResolver<
    TParent
  >
  inviteeHistory?: CircleSubscriberAnalyticsToInviteeHistoryResolver<TParent>
  currentSubscriber?: CircleSubscriberAnalyticsToCurrentSubscriberResolver<
    TParent
  >
  currentInvitee?: CircleSubscriberAnalyticsToCurrentInviteeResolver<TParent>
}

export interface CircleSubscriberAnalyticsToSubscriberHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleSubscriberAnalyticsToInviteeHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleSubscriberAnalyticsToCurrentSubscriberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleSubscriberAnalyticsToCurrentInviteeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCircleFollowerAnalyticsTypeResolver<TParent = any> {
  history?: CircleFollowerAnalyticsToHistoryResolver<TParent>
  current?: CircleFollowerAnalyticsToCurrentResolver<TParent>
  followerPercentage?: CircleFollowerAnalyticsToFollowerPercentageResolver<
    TParent
  >
}

export interface CircleFollowerAnalyticsToHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleFollowerAnalyticsToCurrentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleFollowerAnalyticsToFollowerPercentageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCircleContentAnalyticsTypeResolver<TParent = any> {
  public?: CircleContentAnalyticsToPublicResolver<TParent>
  paywall?: CircleContentAnalyticsToPaywallResolver<TParent>
}

export interface CircleContentAnalyticsToPublicResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleContentAnalyticsToPaywallResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCircleContentAnalyticsDatumTypeResolver<TParent = any> {
  node?: CircleContentAnalyticsDatumToNodeResolver<TParent>
  readCount?: CircleContentAnalyticsDatumToReadCountResolver<TParent>
}

export interface CircleContentAnalyticsDatumToNodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleContentAnalyticsDatumToReadCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCommentConnectionTypeResolver<TParent = any> {
  totalCount?: CommentConnectionToTotalCountResolver<TParent>
  pageInfo?: CommentConnectionToPageInfoResolver<TParent>
  edges?: CommentConnectionToEdgesResolver<TParent>
}

export interface CommentConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCommentEdgeTypeResolver<TParent = any> {
  cursor?: CommentEdgeToCursorResolver<TParent>
  node?: CommentEdgeToNodeResolver<TParent>
}

export interface CommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCommentTypeResolver<TParent = any> {
  id?: CommentToIdResolver<TParent>
  state?: CommentToStateResolver<TParent>
  type?: CommentToTypeResolver<TParent>
  createdAt?: CommentToCreatedAtResolver<TParent>
  content?: CommentToContentResolver<TParent>
  author?: CommentToAuthorResolver<TParent>
  pinned?: CommentToPinnedResolver<TParent>
  fromDonator?: CommentToFromDonatorResolver<TParent>
  upvotes?: CommentToUpvotesResolver<TParent>
  downvotes?: CommentToDownvotesResolver<TParent>
  myVote?: CommentToMyVoteResolver<TParent>
  comments?: CommentToCommentsResolver<TParent>
  parentComment?: CommentToParentCommentResolver<TParent>
  replyTo?: CommentToReplyToResolver<TParent>
  remark?: CommentToRemarkResolver<TParent>
  node?: CommentToNodeResolver<TParent>
}

export interface CommentToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToStateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToContentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToAuthorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToPinnedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToFromDonatorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToUpvotesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToDownvotesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToMyVoteResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToCommentsArgs {
  input: GQLCommentCommentsInput
}
export interface CommentToCommentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: CommentToCommentsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToParentCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToReplyToResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToRemarkResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCircleConnectionTypeResolver<TParent = any> {
  totalCount?: CircleConnectionToTotalCountResolver<TParent>
  pageInfo?: CircleConnectionToPageInfoResolver<TParent>
  edges?: CircleConnectionToEdgesResolver<TParent>
}

export interface CircleConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleConnectionToEdgesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCircleEdgeTypeResolver<TParent = any> {
  cursor?: CircleEdgeToCursorResolver<TParent>
  node?: CircleEdgeToNodeResolver<TParent>
}

export interface CircleEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLNoticeConnectionTypeResolver<TParent = any> {
  totalCount?: NoticeConnectionToTotalCountResolver<TParent>
  pageInfo?: NoticeConnectionToPageInfoResolver<TParent>
  edges?: NoticeConnectionToEdgesResolver<TParent>
}

export interface NoticeConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NoticeConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NoticeConnectionToEdgesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLNoticeEdgeTypeResolver<TParent = any> {
  cursor?: NoticeEdgeToCursorResolver<TParent>
  node?: NoticeEdgeToNodeResolver<TParent>
}

export interface NoticeEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NoticeEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLNoticeTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'ArticleArticleNotice'
    | 'ArticleNotice'
    | 'CircleNotice'
    | 'CommentCommentNotice'
    | 'CommentNotice'
    | 'OfficialAnnouncementNotice'
    | 'TransactionNotice'
    | 'UserNotice'
    | Promise<
        | 'ArticleArticleNotice'
        | 'ArticleNotice'
        | 'CircleNotice'
        | 'CommentCommentNotice'
        | 'CommentNotice'
        | 'OfficialAnnouncementNotice'
        | 'TransactionNotice'
        | 'UserNotice'
      >
}
export interface GQLLikerTypeResolver<TParent = any> {
  likerId?: LikerToLikerIdResolver<TParent>
  civicLiker?: LikerToCivicLikerResolver<TParent>
  total?: LikerToTotalResolver<TParent>
  rateUSD?: LikerToRateUSDResolver<TParent>
}

export interface LikerToLikerIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LikerToCivicLikerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LikerToTotalResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LikerToRateUSDResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserInfoTypeResolver<TParent = any> {
  createdAt?: UserInfoToCreatedAtResolver<TParent>
  userNameEditable?: UserInfoToUserNameEditableResolver<TParent>
  description?: UserInfoToDescriptionResolver<TParent>
  ipnsKey?: UserInfoToIpnsKeyResolver<TParent>
  email?: UserInfoToEmailResolver<TParent>
  emailVerified?: UserInfoToEmailVerifiedResolver<TParent>
  socialAccounts?: UserInfoToSocialAccountsResolver<TParent>
  badges?: UserInfoToBadgesResolver<TParent>
  agreeOn?: UserInfoToAgreeOnResolver<TParent>
  profileCover?: UserInfoToProfileCoverResolver<TParent>
  group?: UserInfoToGroupResolver<TParent>
  ethAddress?: UserInfoToEthAddressResolver<TParent>
  isWalletAuth?: UserInfoToIsWalletAuthResolver<TParent>
  cryptoWallet?: UserInfoToCryptoWalletResolver<TParent>
  featuredTags?: UserInfoToFeaturedTagsResolver<TParent>
}

export interface UserInfoToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToUserNameEditableResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToDescriptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToIpnsKeyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToEmailResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToEmailVerifiedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToSocialAccountsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToBadgesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToAgreeOnResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToProfileCoverResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToGroupResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToEthAddressResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToIsWalletAuthResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToCryptoWalletResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToFeaturedTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSocialAccountTypeResolver<TParent = any> {
  type?: SocialAccountToTypeResolver<TParent>
  userName?: SocialAccountToUserNameResolver<TParent>
  email?: SocialAccountToEmailResolver<TParent>
}

export interface SocialAccountToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SocialAccountToUserNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SocialAccountToEmailResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLBadgeTypeResolver<TParent = any> {
  type?: BadgeToTypeResolver<TParent>
}

export interface BadgeToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCryptoWalletTypeResolver<TParent = any> {
  id?: CryptoWalletToIdResolver<TParent>
  address?: CryptoWalletToAddressResolver<TParent>
  hasNFTs?: CryptoWalletToHasNFTsResolver<TParent>
  nfts?: CryptoWalletToNftsResolver<TParent>
}

export interface CryptoWalletToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CryptoWalletToAddressResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CryptoWalletToHasNFTsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CryptoWalletToNftsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLNFTAssetTypeResolver<TParent = any> {
  id?: NFTAssetToIdResolver<TParent>
  name?: NFTAssetToNameResolver<TParent>
  description?: NFTAssetToDescriptionResolver<TParent>
  imageUrl?: NFTAssetToImageUrlResolver<TParent>
  imagePreviewUrl?: NFTAssetToImagePreviewUrlResolver<TParent>
  contractAddress?: NFTAssetToContractAddressResolver<TParent>
  collectionName?: NFTAssetToCollectionNameResolver<TParent>
}

export interface NFTAssetToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NFTAssetToNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NFTAssetToDescriptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NFTAssetToImageUrlResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NFTAssetToImagePreviewUrlResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NFTAssetToContractAddressResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NFTAssetToCollectionNameResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTagTypeResolver<TParent = any> {
  id?: TagToIdResolver<TParent>
  content?: TagToContentResolver<TParent>
  articles?: TagToArticlesResolver<TParent>
  selected?: TagToSelectedResolver<TParent>
  createdAt?: TagToCreatedAtResolver<TParent>
  cover?: TagToCoverResolver<TParent>
  description?: TagToDescriptionResolver<TParent>
  editors?: TagToEditorsResolver<TParent>
  creator?: TagToCreatorResolver<TParent>
  owner?: TagToOwnerResolver<TParent>
  isFollower?: TagToIsFollowerResolver<TParent>
  isPinned?: TagToIsPinnedResolver<TParent>
  followers?: TagToFollowersResolver<TParent>
  participants?: TagToParticipantsResolver<TParent>
  recommended?: TagToRecommendedResolver<TParent>
  isOfficial?: TagToIsOfficialResolver<TParent>
  numArticles?: TagToNumArticlesResolver<TParent>
  numAuthors?: TagToNumAuthorsResolver<TParent>
  oss?: TagToOssResolver<TParent>
  remark?: TagToRemarkResolver<TParent>
  deleted?: TagToDeletedResolver<TParent>
}

export interface TagToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToContentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToArticlesArgs {
  input: GQLTagArticlesInput
}
export interface TagToArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: TagToArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToSelectedArgs {
  input: GQLTagSelectedInput
}
export interface TagToSelectedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: TagToSelectedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToCoverResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToDescriptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToEditorsArgs {
  input?: GQLTagEditorsInput
}
export interface TagToEditorsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: TagToEditorsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToCreatorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToOwnerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToIsFollowerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToIsPinnedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToFollowersArgs {
  input: GQLConnectionArgs
}
export interface TagToFollowersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: TagToFollowersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToParticipantsArgs {
  input: GQLConnectionArgs
}
export interface TagToParticipantsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: TagToParticipantsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToRecommendedArgs {
  input: GQLConnectionArgs
}
export interface TagToRecommendedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: TagToRecommendedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToIsOfficialResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToNumArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToNumAuthorsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToOssResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToRemarkResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToDeletedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTagConnectionTypeResolver<TParent = any> {
  totalCount?: TagConnectionToTotalCountResolver<TParent>
  pageInfo?: TagConnectionToPageInfoResolver<TParent>
  edges?: TagConnectionToEdgesResolver<TParent>
}

export interface TagConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagConnectionToEdgesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTagEdgeTypeResolver<TParent = any> {
  cursor?: TagEdgeToCursorResolver<TParent>
  node?: TagEdgeToNodeResolver<TParent>
}

export interface TagEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTagOSSTypeResolver<TParent = any> {
  boost?: TagOSSToBoostResolver<TParent>
  score?: TagOSSToScoreResolver<TParent>
  selected?: TagOSSToSelectedResolver<TParent>
}

export interface TagOSSToBoostResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagOSSToScoreResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagOSSToSelectedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserSettingsTypeResolver<TParent = any> {
  language?: UserSettingsToLanguageResolver<TParent>
  currency?: UserSettingsToCurrencyResolver<TParent>
  notification?: UserSettingsToNotificationResolver<TParent>
}

export interface UserSettingsToLanguageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserSettingsToCurrencyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserSettingsToNotificationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLNotificationSettingTypeResolver<TParent = any> {
  email?: NotificationSettingToEmailResolver<TParent>
  mention?: NotificationSettingToMentionResolver<TParent>
  userNewFollower?: NotificationSettingToUserNewFollowerResolver<TParent>
  articleNewComment?: NotificationSettingToArticleNewCommentResolver<TParent>
  articleNewAppreciation?: NotificationSettingToArticleNewAppreciationResolver<
    TParent
  >
  articleNewSubscription?: NotificationSettingToArticleNewSubscriptionResolver<
    TParent
  >
  articleNewCollected?: NotificationSettingToArticleNewCollectedResolver<
    TParent
  >
  articleCommentPinned?: NotificationSettingToArticleCommentPinnedResolver<
    TParent
  >
  circleNewSubscriber?: NotificationSettingToCircleNewSubscriberResolver<
    TParent
  >
  circleNewFollower?: NotificationSettingToCircleNewFollowerResolver<TParent>
  circleNewUnsubscriber?: NotificationSettingToCircleNewUnsubscriberResolver<
    TParent
  >
  circleMemberNewBroadcastReply?: NotificationSettingToCircleMemberNewBroadcastReplyResolver<
    TParent
  >
  circleMemberNewDiscussion?: NotificationSettingToCircleMemberNewDiscussionResolver<
    TParent
  >
  circleMemberNewDiscussionReply?: NotificationSettingToCircleMemberNewDiscussionReplyResolver<
    TParent
  >
  inCircleNewArticle?: NotificationSettingToInCircleNewArticleResolver<TParent>
  inCircleNewBroadcast?: NotificationSettingToInCircleNewBroadcastResolver<
    TParent
  >
  inCircleNewBroadcastReply?: NotificationSettingToInCircleNewBroadcastReplyResolver<
    TParent
  >
  inCircleNewDiscussion?: NotificationSettingToInCircleNewDiscussionResolver<
    TParent
  >
  inCircleNewDiscussionReply?: NotificationSettingToInCircleNewDiscussionReplyResolver<
    TParent
  >
}

export interface NotificationSettingToEmailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToMentionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToUserNewFollowerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToArticleNewCommentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToArticleNewAppreciationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToArticleNewSubscriptionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToArticleNewCollectedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToArticleCommentPinnedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToCircleNewSubscriberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToCircleNewFollowerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToCircleNewUnsubscriberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToCircleMemberNewBroadcastReplyResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToCircleMemberNewDiscussionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToCircleMemberNewDiscussionReplyResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToInCircleNewArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToInCircleNewBroadcastResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToInCircleNewBroadcastReplyResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToInCircleNewDiscussionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToInCircleNewDiscussionReplyResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLRecommendationTypeResolver<TParent = any> {
  following?: RecommendationToFollowingResolver<TParent>
  readTagsArticles?: RecommendationToReadTagsArticlesResolver<TParent>
  newest?: RecommendationToNewestResolver<TParent>
  hottest?: RecommendationToHottestResolver<TParent>
  icymi?: RecommendationToIcymiResolver<TParent>
  icymiTopic?: RecommendationToIcymiTopicResolver<TParent>
  tags?: RecommendationToTagsResolver<TParent>
  hottestTags?: RecommendationToHottestTagsResolver<TParent>
  selectedTags?: RecommendationToSelectedTagsResolver<TParent>
  authors?: RecommendationToAuthorsResolver<TParent>
  newestCircles?: RecommendationToNewestCirclesResolver<TParent>
  hottestCircles?: RecommendationToHottestCirclesResolver<TParent>
}

export interface RecommendationToFollowingArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToFollowingResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: RecommendationToFollowingArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToReadTagsArticlesArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToReadTagsArticlesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: RecommendationToReadTagsArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToNewestArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToNewestResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToNewestArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToHottestArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToHottestResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToHottestArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToIcymiArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToIcymiResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToIcymiArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToIcymiTopicResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToTagsArgs {
  input: GQLRecommendInput
}
export interface RecommendationToTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToHottestTagsArgs {
  input: GQLRecommendInput
}
export interface RecommendationToHottestTagsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: RecommendationToHottestTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToSelectedTagsArgs {
  input: GQLRecommendInput
}
export interface RecommendationToSelectedTagsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: RecommendationToSelectedTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToAuthorsArgs {
  input: GQLRecommendInput
}
export interface RecommendationToAuthorsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToAuthorsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToNewestCirclesArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToNewestCirclesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: RecommendationToNewestCirclesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToHottestCirclesArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToHottestCirclesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: RecommendationToHottestCirclesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLFollowingActivityConnectionTypeResolver<TParent = any> {
  totalCount?: FollowingActivityConnectionToTotalCountResolver<TParent>
  pageInfo?: FollowingActivityConnectionToPageInfoResolver<TParent>
  edges?: FollowingActivityConnectionToEdgesResolver<TParent>
}

export interface FollowingActivityConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface FollowingActivityConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface FollowingActivityConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLFollowingActivityEdgeTypeResolver<TParent = any> {
  cursor?: FollowingActivityEdgeToCursorResolver<TParent>
  node?: FollowingActivityEdgeToNodeResolver<TParent>
}

export interface FollowingActivityEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface FollowingActivityEdgeToNodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLFollowingActivityTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'UserPublishArticleActivity'
    | 'UserAddArticleTagActivity'
    | 'UserBroadcastCircleActivity'
    | 'UserCreateCircleActivity'
    | 'UserRecommendationActivity'
    | 'ArticleRecommendationActivity'
    | 'CircleRecommendationActivity'
    | Promise<
        | 'UserPublishArticleActivity'
        | 'UserAddArticleTagActivity'
        | 'UserBroadcastCircleActivity'
        | 'UserCreateCircleActivity'
        | 'UserRecommendationActivity'
        | 'ArticleRecommendationActivity'
        | 'CircleRecommendationActivity'
      >
}
export interface GQLUserPublishArticleActivityTypeResolver<TParent = any> {
  actor?: UserPublishArticleActivityToActorResolver<TParent>
  createdAt?: UserPublishArticleActivityToCreatedAtResolver<TParent>
  node?: UserPublishArticleActivityToNodeResolver<TParent>
}

export interface UserPublishArticleActivityToActorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserPublishArticleActivityToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserPublishArticleActivityToNodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserAddArticleTagActivityTypeResolver<TParent = any> {
  actor?: UserAddArticleTagActivityToActorResolver<TParent>
  createdAt?: UserAddArticleTagActivityToCreatedAtResolver<TParent>
  node?: UserAddArticleTagActivityToNodeResolver<TParent>
  target?: UserAddArticleTagActivityToTargetResolver<TParent>
}

export interface UserAddArticleTagActivityToActorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserAddArticleTagActivityToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserAddArticleTagActivityToNodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserAddArticleTagActivityToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserBroadcastCircleActivityTypeResolver<TParent = any> {
  actor?: UserBroadcastCircleActivityToActorResolver<TParent>
  createdAt?: UserBroadcastCircleActivityToCreatedAtResolver<TParent>
  node?: UserBroadcastCircleActivityToNodeResolver<TParent>
  target?: UserBroadcastCircleActivityToTargetResolver<TParent>
}

export interface UserBroadcastCircleActivityToActorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserBroadcastCircleActivityToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserBroadcastCircleActivityToNodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserBroadcastCircleActivityToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserCreateCircleActivityTypeResolver<TParent = any> {
  actor?: UserCreateCircleActivityToActorResolver<TParent>
  createdAt?: UserCreateCircleActivityToCreatedAtResolver<TParent>
  node?: UserCreateCircleActivityToNodeResolver<TParent>
}

export interface UserCreateCircleActivityToActorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserCreateCircleActivityToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserCreateCircleActivityToNodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserRecommendationActivityTypeResolver<TParent = any> {
  source?: UserRecommendationActivityToSourceResolver<TParent>
  nodes?: UserRecommendationActivityToNodesResolver<TParent>
}

export interface UserRecommendationActivityToSourceResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserRecommendationActivityToNodesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleRecommendationActivityTypeResolver<TParent = any> {
  source?: ArticleRecommendationActivityToSourceResolver<TParent>
  nodes?: ArticleRecommendationActivityToNodesResolver<TParent>
}

export interface ArticleRecommendationActivityToSourceResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleRecommendationActivityToNodesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCircleRecommendationActivityTypeResolver<TParent = any> {
  source?: CircleRecommendationActivityToSourceResolver<TParent>
  nodes?: CircleRecommendationActivityToNodesResolver<TParent>
}

export interface CircleRecommendationActivityToSourceResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleRecommendationActivityToNodesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLIcymiTopicTypeResolver<TParent = any> {
  id?: IcymiTopicToIdResolver<TParent>
  title?: IcymiTopicToTitleResolver<TParent>
  articles?: IcymiTopicToArticlesResolver<TParent>
  pinAmount?: IcymiTopicToPinAmountResolver<TParent>
  note?: IcymiTopicToNoteResolver<TParent>
  state?: IcymiTopicToStateResolver<TParent>
  publishedAt?: IcymiTopicToPublishedAtResolver<TParent>
  archivedAt?: IcymiTopicToArchivedAtResolver<TParent>
}

export interface IcymiTopicToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IcymiTopicToTitleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IcymiTopicToArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IcymiTopicToPinAmountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IcymiTopicToNoteResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IcymiTopicToStateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IcymiTopicToPublishedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IcymiTopicToArchivedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTopicConnectionTypeResolver<TParent = any> {
  totalCount?: TopicConnectionToTotalCountResolver<TParent>
  pageInfo?: TopicConnectionToPageInfoResolver<TParent>
  edges?: TopicConnectionToEdgesResolver<TParent>
}

export interface TopicConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopicConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopicConnectionToEdgesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTopicEdgeTypeResolver<TParent = any> {
  cursor?: TopicEdgeToCursorResolver<TParent>
  node?: TopicEdgeToNodeResolver<TParent>
}

export interface TopicEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopicEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTopicTypeResolver<TParent = any> {
  id?: TopicToIdResolver<TParent>
  title?: TopicToTitleResolver<TParent>
  cover?: TopicToCoverResolver<TParent>
  description?: TopicToDescriptionResolver<TParent>
  chapterCount?: TopicToChapterCountResolver<TParent>
  articleCount?: TopicToArticleCountResolver<TParent>
  chapters?: TopicToChaptersResolver<TParent>
  articles?: TopicToArticlesResolver<TParent>
  author?: TopicToAuthorResolver<TParent>
  public?: TopicToPublicResolver<TParent>
  latestArticle?: TopicToLatestArticleResolver<TParent>
}

export interface TopicToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopicToTitleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopicToCoverResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopicToDescriptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopicToChapterCountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopicToArticleCountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopicToChaptersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopicToArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopicToAuthorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopicToPublicResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopicToLatestArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLChapterTypeResolver<TParent = any> {
  id?: ChapterToIdResolver<TParent>
  title?: ChapterToTitleResolver<TParent>
  description?: ChapterToDescriptionResolver<TParent>
  articleCount?: ChapterToArticleCountResolver<TParent>
  articles?: ChapterToArticlesResolver<TParent>
  topic?: ChapterToTopicResolver<TParent>
}

export interface ChapterToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ChapterToTitleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ChapterToDescriptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ChapterToArticleCountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ChapterToArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ChapterToTopicResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCollectionConnectionTypeResolver<TParent = any> {
  totalCount?: CollectionConnectionToTotalCountResolver<TParent>
  pageInfo?: CollectionConnectionToPageInfoResolver<TParent>
  edges?: CollectionConnectionToEdgesResolver<TParent>
}

export interface CollectionConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CollectionConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CollectionConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCollectionEdgeTypeResolver<TParent = any> {
  cursor?: CollectionEdgeToCursorResolver<TParent>
  node?: CollectionEdgeToNodeResolver<TParent>
}

export interface CollectionEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CollectionEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCollectionTypeResolver<TParent = any> {
  id?: CollectionToIdResolver<TParent>
  title?: CollectionToTitleResolver<TParent>
  cover?: CollectionToCoverResolver<TParent>
  description?: CollectionToDescriptionResolver<TParent>
  author?: CollectionToAuthorResolver<TParent>
  articles?: CollectionToArticlesResolver<TParent>
  pinned?: CollectionToPinnedResolver<TParent>
  updatedAt?: CollectionToUpdatedAtResolver<TParent>
  contains?: CollectionToContainsResolver<TParent>
}

export interface CollectionToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CollectionToTitleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CollectionToCoverResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CollectionToDescriptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CollectionToAuthorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CollectionToArticlesArgs {
  input: GQLCollectionArticlesInput
}
export interface CollectionToArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: CollectionToArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CollectionToPinnedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CollectionToUpdatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CollectionToContainsArgs {
  input: GQLNodeInput
}
export interface CollectionToContainsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: CollectionToContainsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDraftConnectionTypeResolver<TParent = any> {
  totalCount?: DraftConnectionToTotalCountResolver<TParent>
  pageInfo?: DraftConnectionToPageInfoResolver<TParent>
  edges?: DraftConnectionToEdgesResolver<TParent>
}

export interface DraftConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftConnectionToEdgesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDraftEdgeTypeResolver<TParent = any> {
  cursor?: DraftEdgeToCursorResolver<TParent>
  node?: DraftEdgeToNodeResolver<TParent>
}

export interface DraftEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDraftTypeResolver<TParent = any> {
  id?: DraftToIdResolver<TParent>
  mediaHash?: DraftToMediaHashResolver<TParent>
  title?: DraftToTitleResolver<TParent>
  slug?: DraftToSlugResolver<TParent>
  summary?: DraftToSummaryResolver<TParent>
  summaryCustomized?: DraftToSummaryCustomizedResolver<TParent>
  content?: DraftToContentResolver<TParent>
  createdAt?: DraftToCreatedAtResolver<TParent>
  updatedAt?: DraftToUpdatedAtResolver<TParent>
  wordCount?: DraftToWordCountResolver<TParent>
  tags?: DraftToTagsResolver<TParent>
  cover?: DraftToCoverResolver<TParent>
  publishState?: DraftToPublishStateResolver<TParent>
  assets?: DraftToAssetsResolver<TParent>
  article?: DraftToArticleResolver<TParent>
  collection?: DraftToCollectionResolver<TParent>
  access?: DraftToAccessResolver<TParent>
  sensitiveByAuthor?: DraftToSensitiveByAuthorResolver<TParent>
  license?: DraftToLicenseResolver<TParent>
  requestForDonation?: DraftToRequestForDonationResolver<TParent>
  replyToDonator?: DraftToReplyToDonatorResolver<TParent>
  iscnPublish?: DraftToIscnPublishResolver<TParent>
  canComment?: DraftToCanCommentResolver<TParent>
}

export interface DraftToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToMediaHashResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToTitleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToSlugResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToSummaryResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToSummaryCustomizedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToContentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToUpdatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToWordCountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToCoverResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToPublishStateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToAssetsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToCollectionArgs {
  input: GQLConnectionArgs
}
export interface DraftToCollectionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: DraftToCollectionArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToAccessResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToSensitiveByAuthorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToLicenseResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToRequestForDonationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToReplyToDonatorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToIscnPublishResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToCanCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAssetTypeResolver<TParent = any> {
  id?: AssetToIdResolver<TParent>
  type?: AssetToTypeResolver<TParent>
  path?: AssetToPathResolver<TParent>
  draft?: AssetToDraftResolver<TParent>
  uploadURL?: AssetToUploadURLResolver<TParent>
  createdAt?: AssetToCreatedAtResolver<TParent>
}

export interface AssetToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AssetToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AssetToPathResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AssetToDraftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AssetToUploadURLResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AssetToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDraftAccessTypeResolver<TParent = any> {
  type?: DraftAccessToTypeResolver<TParent>
  circle?: DraftAccessToCircleResolver<TParent>
}

export interface DraftAccessToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftAccessToCircleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserActivityTypeResolver<TParent = any> {
  history?: UserActivityToHistoryResolver<TParent>
  recentSearches?: UserActivityToRecentSearchesResolver<TParent>
  appreciationsSent?: UserActivityToAppreciationsSentResolver<TParent>
  appreciationsSentTotal?: UserActivityToAppreciationsSentTotalResolver<TParent>
  appreciationsReceived?: UserActivityToAppreciationsReceivedResolver<TParent>
  appreciationsReceivedTotal?: UserActivityToAppreciationsReceivedTotalResolver<
    TParent
  >
}

export interface UserActivityToHistoryArgs {
  input: GQLConnectionArgs
}
export interface UserActivityToHistoryResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserActivityToHistoryArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserActivityToRecentSearchesArgs {
  input: GQLConnectionArgs
}
export interface UserActivityToRecentSearchesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserActivityToRecentSearchesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserActivityToAppreciationsSentArgs {
  input: GQLConnectionArgs
}
export interface UserActivityToAppreciationsSentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserActivityToAppreciationsSentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserActivityToAppreciationsSentTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserActivityToAppreciationsReceivedArgs {
  input: GQLConnectionArgs
}
export interface UserActivityToAppreciationsReceivedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserActivityToAppreciationsReceivedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserActivityToAppreciationsReceivedTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLReadHistoryConnectionTypeResolver<TParent = any> {
  totalCount?: ReadHistoryConnectionToTotalCountResolver<TParent>
  pageInfo?: ReadHistoryConnectionToPageInfoResolver<TParent>
  edges?: ReadHistoryConnectionToEdgesResolver<TParent>
}

export interface ReadHistoryConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReadHistoryConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReadHistoryConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLReadHistoryEdgeTypeResolver<TParent = any> {
  cursor?: ReadHistoryEdgeToCursorResolver<TParent>
  node?: ReadHistoryEdgeToNodeResolver<TParent>
}

export interface ReadHistoryEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReadHistoryEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLReadHistoryTypeResolver<TParent = any> {
  article?: ReadHistoryToArticleResolver<TParent>
  readAt?: ReadHistoryToReadAtResolver<TParent>
}

export interface ReadHistoryToArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReadHistoryToReadAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLRecentSearchConnectionTypeResolver<TParent = any> {
  totalCount?: RecentSearchConnectionToTotalCountResolver<TParent>
  pageInfo?: RecentSearchConnectionToPageInfoResolver<TParent>
  edges?: RecentSearchConnectionToEdgesResolver<TParent>
}

export interface RecentSearchConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecentSearchConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecentSearchConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLRecentSearchEdgeTypeResolver<TParent = any> {
  cursor?: RecentSearchEdgeToCursorResolver<TParent>
  node?: RecentSearchEdgeToNodeResolver<TParent>
}

export interface RecentSearchEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecentSearchEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAppreciationConnectionTypeResolver<TParent = any> {
  totalCount?: AppreciationConnectionToTotalCountResolver<TParent>
  pageInfo?: AppreciationConnectionToPageInfoResolver<TParent>
  edges?: AppreciationConnectionToEdgesResolver<TParent>
}

export interface AppreciationConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAppreciationEdgeTypeResolver<TParent = any> {
  cursor?: AppreciationEdgeToCursorResolver<TParent>
  node?: AppreciationEdgeToNodeResolver<TParent>
}

export interface AppreciationEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAppreciationTypeResolver<TParent = any> {
  amount?: AppreciationToAmountResolver<TParent>
  purpose?: AppreciationToPurposeResolver<TParent>
  content?: AppreciationToContentResolver<TParent>
  createdAt?: AppreciationToCreatedAtResolver<TParent>
  recipient?: AppreciationToRecipientResolver<TParent>
  sender?: AppreciationToSenderResolver<TParent>
  target?: AppreciationToTargetResolver<TParent>
}

export interface AppreciationToAmountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationToPurposeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationToContentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationToRecipientResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationToSenderResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationToTargetResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLFollowingTypeResolver<TParent = any> {
  circles?: FollowingToCirclesResolver<TParent>
  tags?: FollowingToTagsResolver<TParent>
  users?: FollowingToUsersResolver<TParent>
}

export interface FollowingToCirclesArgs {
  input: GQLConnectionArgs
}
export interface FollowingToCirclesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: FollowingToCirclesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface FollowingToTagsArgs {
  input: GQLConnectionArgs
}
export interface FollowingToTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: FollowingToTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface FollowingToUsersArgs {
  input: GQLConnectionArgs
}
export interface FollowingToUsersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: FollowingToUsersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserAnalyticsTypeResolver<TParent = any> {
  topDonators?: UserAnalyticsToTopDonatorsResolver<TParent>
}

export interface UserAnalyticsToTopDonatorsArgs {
  input: GQLTopDonatorInput
}
export interface UserAnalyticsToTopDonatorsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserAnalyticsToTopDonatorsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTopDonatorConnectionTypeResolver<TParent = any> {
  totalCount?: TopDonatorConnectionToTotalCountResolver<TParent>
  pageInfo?: TopDonatorConnectionToPageInfoResolver<TParent>
  edges?: TopDonatorConnectionToEdgesResolver<TParent>
}

export interface TopDonatorConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopDonatorConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopDonatorConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTopDonatorEdgeTypeResolver<TParent = any> {
  cursor?: TopDonatorEdgeToCursorResolver<TParent>
  node?: TopDonatorEdgeToNodeResolver<TParent>
  donationCount?: TopDonatorEdgeToDonationCountResolver<TParent>
}

export interface TopDonatorEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopDonatorEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TopDonatorEdgeToDonationCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserStatusTypeResolver<TParent = any> {
  state?: UserStatusToStateResolver<TParent>
  role?: UserStatusToRoleResolver<TParent>
  articleCount?: UserStatusToArticleCountResolver<TParent>
  commentCount?: UserStatusToCommentCountResolver<TParent>
  unreadNoticeCount?: UserStatusToUnreadNoticeCountResolver<TParent>
  unreadFollowing?: UserStatusToUnreadFollowingResolver<TParent>
  totalWordCount?: UserStatusToTotalWordCountResolver<TParent>
  totalReferredCount?: UserStatusToTotalReferredCountResolver<TParent>
  hasEmailLoginPassword?: UserStatusToHasEmailLoginPasswordResolver<TParent>
  changeEmailTimesLeft?: UserStatusToChangeEmailTimesLeftResolver<TParent>
  hasPaymentPassword?: UserStatusToHasPaymentPasswordResolver<TParent>
  donatedArticleCount?: UserStatusToDonatedArticleCountResolver<TParent>
  receivedDonationCount?: UserStatusToReceivedDonationCountResolver<TParent>
}

export interface UserStatusToStateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToRoleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToArticleCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToCommentCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToUnreadNoticeCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToUnreadFollowingResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToTotalWordCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToTotalReferredCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToHasEmailLoginPasswordResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToChangeEmailTimesLeftResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToHasPaymentPasswordResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToDonatedArticleCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToReceivedDonationCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserOSSTypeResolver<TParent = any> {
  boost?: UserOSSToBoostResolver<TParent>
  score?: UserOSSToScoreResolver<TParent>
  restrictions?: UserOSSToRestrictionsResolver<TParent>
}

export interface UserOSSToBoostResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserOSSToScoreResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserOSSToRestrictionsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserRestrictionTypeResolver<TParent = any> {
  type?: UserRestrictionToTypeResolver<TParent>
  createdAt?: UserRestrictionToCreatedAtResolver<TParent>
}

export interface UserRestrictionToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserRestrictionToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLWalletTypeResolver<TParent = any> {
  balance?: WalletToBalanceResolver<TParent>
  transactions?: WalletToTransactionsResolver<TParent>
  stripeAccount?: WalletToStripeAccountResolver<TParent>
  customerPortal?: WalletToCustomerPortalResolver<TParent>
  cardLast4?: WalletToCardLast4Resolver<TParent>
}

export interface WalletToBalanceResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface WalletToTransactionsArgs {
  input: GQLTransactionsArgs
}
export interface WalletToTransactionsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: WalletToTransactionsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface WalletToStripeAccountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface WalletToCustomerPortalResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface WalletToCardLast4Resolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLBalanceTypeResolver<TParent = any> {
  HKD?: BalanceToHKDResolver<TParent>
}

export interface BalanceToHKDResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTransactionConnectionTypeResolver<TParent = any> {
  totalCount?: TransactionConnectionToTotalCountResolver<TParent>
  pageInfo?: TransactionConnectionToPageInfoResolver<TParent>
  edges?: TransactionConnectionToEdgesResolver<TParent>
}

export interface TransactionConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTransactionEdgeTypeResolver<TParent = any> {
  cursor?: TransactionEdgeToCursorResolver<TParent>
  node?: TransactionEdgeToNodeResolver<TParent>
}

export interface TransactionEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTransactionTypeResolver<TParent = any> {
  id?: TransactionToIdResolver<TParent>
  state?: TransactionToStateResolver<TParent>
  purpose?: TransactionToPurposeResolver<TParent>
  amount?: TransactionToAmountResolver<TParent>
  fee?: TransactionToFeeResolver<TParent>
  currency?: TransactionToCurrencyResolver<TParent>
  createdAt?: TransactionToCreatedAtResolver<TParent>
  recipient?: TransactionToRecipientResolver<TParent>
  sender?: TransactionToSenderResolver<TParent>
  target?: TransactionToTargetResolver<TParent>
  message?: TransactionToMessageResolver<TParent>
  blockchainTx?: TransactionToBlockchainTxResolver<TParent>
}

export interface TransactionToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToStateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToPurposeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToAmountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToFeeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToCurrencyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToRecipientResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToSenderResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToTargetResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToMessageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToBlockchainTxResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTransactionTargetTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'Article'
    | 'Circle'
    | 'Transaction'
    | Promise<'Article' | 'Circle' | 'Transaction'>
}
export interface GQLBlockchainTransactionTypeResolver<TParent = any> {
  chain?: BlockchainTransactionToChainResolver<TParent>
  txHash?: BlockchainTransactionToTxHashResolver<TParent>
}

export interface BlockchainTransactionToChainResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BlockchainTransactionToTxHashResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLStripeAccountTypeResolver<TParent = any> {
  id?: StripeAccountToIdResolver<TParent>
  loginUrl?: StripeAccountToLoginUrlResolver<TParent>
}

export interface StripeAccountToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface StripeAccountToLoginUrlResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleContentsTypeResolver<TParent = any> {
  markdown?: ArticleContentsToMarkdownResolver<TParent>
  html?: ArticleContentsToHtmlResolver<TParent>
}

export interface ArticleContentsToMarkdownResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleContentsToHtmlResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleTranslationTypeResolver<TParent = any> {
  title?: ArticleTranslationToTitleResolver<TParent>
  content?: ArticleTranslationToContentResolver<TParent>
  summary?: ArticleTranslationToSummaryResolver<TParent>
  language?: ArticleTranslationToLanguageResolver<TParent>
}

export interface ArticleTranslationToTitleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTranslationToContentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTranslationToSummaryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTranslationToLanguageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleDonationConnectionTypeResolver<TParent = any> {
  totalCount?: ArticleDonationConnectionToTotalCountResolver<TParent>
  pageInfo?: ArticleDonationConnectionToPageInfoResolver<TParent>
  edges?: ArticleDonationConnectionToEdgesResolver<TParent>
}

export interface ArticleDonationConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleDonationConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleDonationConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleDonationEdgeTypeResolver<TParent = any> {
  cursor?: ArticleDonationEdgeToCursorResolver<TParent>
  node?: ArticleDonationEdgeToNodeResolver<TParent>
}

export interface ArticleDonationEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleDonationEdgeToNodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleDonationTypeResolver<TParent = any> {
  id?: ArticleDonationToIdResolver<TParent>
  sender?: ArticleDonationToSenderResolver<TParent>
}

export interface ArticleDonationToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleDonationToSenderResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleAccessTypeResolver<TParent = any> {
  type?: ArticleAccessToTypeResolver<TParent>
  secret?: ArticleAccessToSecretResolver<TParent>
  circle?: ArticleAccessToCircleResolver<TParent>
}

export interface ArticleAccessToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleAccessToSecretResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleAccessToCircleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleVersionsConnectionTypeResolver<TParent = any> {
  totalCount?: ArticleVersionsConnectionToTotalCountResolver<TParent>
  pageInfo?: ArticleVersionsConnectionToPageInfoResolver<TParent>
  edges?: ArticleVersionsConnectionToEdgesResolver<TParent>
}

export interface ArticleVersionsConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleVersionsConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleVersionsConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleVersionEdgeTypeResolver<TParent = any> {
  node?: ArticleVersionEdgeToNodeResolver<TParent>
  cursor?: ArticleVersionEdgeToCursorResolver<TParent>
}

export interface ArticleVersionEdgeToNodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleVersionEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleVersionTypeResolver<TParent = any> {
  id?: ArticleVersionToIdResolver<TParent>
  dataHash?: ArticleVersionToDataHashResolver<TParent>
  mediaHash?: ArticleVersionToMediaHashResolver<TParent>
  title?: ArticleVersionToTitleResolver<TParent>
  summary?: ArticleVersionToSummaryResolver<TParent>
  contents?: ArticleVersionToContentsResolver<TParent>
  translation?: ArticleVersionToTranslationResolver<TParent>
  createdAt?: ArticleVersionToCreatedAtResolver<TParent>
  description?: ArticleVersionToDescriptionResolver<TParent>
}

export interface ArticleVersionToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleVersionToDataHashResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleVersionToMediaHashResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleVersionToTitleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleVersionToSummaryResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleVersionToContentsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleVersionToTranslationArgs {
  input?: GQLTranslationArgs
}
export interface ArticleVersionToTranslationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: ArticleVersionToTranslationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleVersionToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleVersionToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleOSSTypeResolver<TParent = any> {
  boost?: ArticleOSSToBoostResolver<TParent>
  score?: ArticleOSSToScoreResolver<TParent>
  inRecommendIcymi?: ArticleOSSToInRecommendIcymiResolver<TParent>
  inRecommendHottest?: ArticleOSSToInRecommendHottestResolver<TParent>
  inRecommendNewest?: ArticleOSSToInRecommendNewestResolver<TParent>
}

export interface ArticleOSSToBoostResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleOSSToScoreResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleOSSToInRecommendIcymiResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleOSSToInRecommendHottestResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleOSSToInRecommendNewestResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLResponseConnectionTypeResolver<TParent = any> {
  totalCount?: ResponseConnectionToTotalCountResolver<TParent>
  pageInfo?: ResponseConnectionToPageInfoResolver<TParent>
  edges?: ResponseConnectionToEdgesResolver<TParent>
}

export interface ResponseConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ResponseConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ResponseConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLResponseEdgeTypeResolver<TParent = any> {
  cursor?: ResponseEdgeToCursorResolver<TParent>
  node?: ResponseEdgeToNodeResolver<TParent>
}

export interface ResponseEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ResponseEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLResponseTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'Article'
    | 'Comment'
    | Promise<'Article' | 'Comment'>
}
export interface GQLSearchResultConnectionTypeResolver<TParent = any> {
  totalCount?: SearchResultConnectionToTotalCountResolver<TParent>
  pageInfo?: SearchResultConnectionToPageInfoResolver<TParent>
  edges?: SearchResultConnectionToEdgesResolver<TParent>
}

export interface SearchResultConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchResultConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchResultConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSearchResultEdgeTypeResolver<TParent = any> {
  cursor?: SearchResultEdgeToCursorResolver<TParent>
  node?: SearchResultEdgeToNodeResolver<TParent>
}

export interface SearchResultEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchResultEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLOfficialTypeResolver<TParent = any> {
  features?: OfficialToFeaturesResolver<TParent>
  announcements?: OfficialToAnnouncementsResolver<TParent>
}

export interface OfficialToFeaturesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialToAnnouncementsArgs {
  input: GQLAnnouncementsInput
}
export interface OfficialToAnnouncementsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OfficialToAnnouncementsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLFeatureTypeResolver<TParent = any> {
  name?: FeatureToNameResolver<TParent>
  enabled?: FeatureToEnabledResolver<TParent>
}

export interface FeatureToNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface FeatureToEnabledResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAnnouncementTypeResolver<TParent = any> {
  id?: AnnouncementToIdResolver<TParent>
  title?: AnnouncementToTitleResolver<TParent>
  cover?: AnnouncementToCoverResolver<TParent>
  content?: AnnouncementToContentResolver<TParent>
  link?: AnnouncementToLinkResolver<TParent>
  type?: AnnouncementToTypeResolver<TParent>
  visible?: AnnouncementToVisibleResolver<TParent>
  order?: AnnouncementToOrderResolver<TParent>
  createdAt?: AnnouncementToCreatedAtResolver<TParent>
  updatedAt?: AnnouncementToUpdatedAtResolver<TParent>
  expiredAt?: AnnouncementToExpiredAtResolver<TParent>
  translations?: AnnouncementToTranslationsResolver<TParent>
}

export interface AnnouncementToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AnnouncementToTitleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AnnouncementToCoverResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AnnouncementToContentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AnnouncementToLinkResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AnnouncementToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AnnouncementToVisibleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AnnouncementToOrderResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AnnouncementToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AnnouncementToUpdatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AnnouncementToExpiredAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AnnouncementToTranslationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTranslatedAnnouncementTypeResolver<TParent = any> {
  language?: TranslatedAnnouncementToLanguageResolver<TParent>
  title?: TranslatedAnnouncementToTitleResolver<TParent>
  cover?: TranslatedAnnouncementToCoverResolver<TParent>
  content?: TranslatedAnnouncementToContentResolver<TParent>
  link?: TranslatedAnnouncementToLinkResolver<TParent>
}

export interface TranslatedAnnouncementToLanguageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TranslatedAnnouncementToTitleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TranslatedAnnouncementToCoverResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TranslatedAnnouncementToContentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TranslatedAnnouncementToLinkResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLOSSTypeResolver<TParent = any> {
  users?: OSSToUsersResolver<TParent>
  comments?: OSSToCommentsResolver<TParent>
  articles?: OSSToArticlesResolver<TParent>
  tags?: OSSToTagsResolver<TParent>
  oauthClients?: OSSToOauthClientsResolver<TParent>
  skippedListItems?: OSSToSkippedListItemsResolver<TParent>
  seedingUsers?: OSSToSeedingUsersResolver<TParent>
  badgedUsers?: OSSToBadgedUsersResolver<TParent>
  restrictedUsers?: OSSToRestrictedUsersResolver<TParent>
  reports?: OSSToReportsResolver<TParent>
  icymiTopics?: OSSToIcymiTopicsResolver<TParent>
}

export interface OSSToUsersArgs {
  input: GQLConnectionArgs
}
export interface OSSToUsersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToUsersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToCommentsArgs {
  input: GQLConnectionArgs
}
export interface OSSToCommentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToCommentsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToArticlesArgs {
  input: GQLConnectionArgs
}
export interface OSSToArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToTagsArgs {
  input: GQLTagsInput
}
export interface OSSToTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToOauthClientsArgs {
  input: GQLConnectionArgs
}
export interface OSSToOauthClientsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToOauthClientsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToSkippedListItemsArgs {
  input: GQLSkippedListItemsInput
}
export interface OSSToSkippedListItemsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToSkippedListItemsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToSeedingUsersArgs {
  input: GQLConnectionArgs
}
export interface OSSToSeedingUsersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToSeedingUsersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToBadgedUsersArgs {
  input: GQLBadgedUsersInput
}
export interface OSSToBadgedUsersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToBadgedUsersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToRestrictedUsersArgs {
  input: GQLConnectionArgs
}
export interface OSSToRestrictedUsersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToRestrictedUsersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToReportsArgs {
  input: GQLConnectionArgs
}
export interface OSSToReportsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToReportsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToIcymiTopicsArgs {
  input: GQLConnectionArgs
}
export interface OSSToIcymiTopicsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToIcymiTopicsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLOAuthClientConnectionTypeResolver<TParent = any> {
  totalCount?: OAuthClientConnectionToTotalCountResolver<TParent>
  pageInfo?: OAuthClientConnectionToPageInfoResolver<TParent>
  edges?: OAuthClientConnectionToEdgesResolver<TParent>
}

export interface OAuthClientConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLOAuthClientEdgeTypeResolver<TParent = any> {
  cursor?: OAuthClientEdgeToCursorResolver<TParent>
  node?: OAuthClientEdgeToNodeResolver<TParent>
}

export interface OAuthClientEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLOAuthClientTypeResolver<TParent = any> {
  id?: OAuthClientToIdResolver<TParent>
  name?: OAuthClientToNameResolver<TParent>
  description?: OAuthClientToDescriptionResolver<TParent>
  website?: OAuthClientToWebsiteResolver<TParent>
  scope?: OAuthClientToScopeResolver<TParent>
  avatar?: OAuthClientToAvatarResolver<TParent>
  secret?: OAuthClientToSecretResolver<TParent>
  redirectURIs?: OAuthClientToRedirectURIsResolver<TParent>
  grantTypes?: OAuthClientToGrantTypesResolver<TParent>
  user?: OAuthClientToUserResolver<TParent>
  createdAt?: OAuthClientToCreatedAtResolver<TParent>
}

export interface OAuthClientToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToWebsiteResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToScopeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToAvatarResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToSecretResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToRedirectURIsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToGrantTypesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSkippedListItemsConnectionTypeResolver<TParent = any> {
  totalCount?: SkippedListItemsConnectionToTotalCountResolver<TParent>
  pageInfo?: SkippedListItemsConnectionToPageInfoResolver<TParent>
  edges?: SkippedListItemsConnectionToEdgesResolver<TParent>
}

export interface SkippedListItemsConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemsConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemsConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSkippedListItemEdgeTypeResolver<TParent = any> {
  cursor?: SkippedListItemEdgeToCursorResolver<TParent>
  node?: SkippedListItemEdgeToNodeResolver<TParent>
}

export interface SkippedListItemEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemEdgeToNodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSkippedListItemTypeResolver<TParent = any> {
  id?: SkippedListItemToIdResolver<TParent>
  uuid?: SkippedListItemToUuidResolver<TParent>
  type?: SkippedListItemToTypeResolver<TParent>
  value?: SkippedListItemToValueResolver<TParent>
  archived?: SkippedListItemToArchivedResolver<TParent>
  createdAt?: SkippedListItemToCreatedAtResolver<TParent>
  updatedAt?: SkippedListItemToUpdatedAtResolver<TParent>
}

export interface SkippedListItemToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemToUuidResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemToValueResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemToArchivedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLReportConnectionTypeResolver<TParent = any> {
  totalCount?: ReportConnectionToTotalCountResolver<TParent>
  pageInfo?: ReportConnectionToPageInfoResolver<TParent>
  edges?: ReportConnectionToEdgesResolver<TParent>
}

export interface ReportConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportConnectionToEdgesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLReportEdgeTypeResolver<TParent = any> {
  cursor?: ReportEdgeToCursorResolver<TParent>
  node?: ReportEdgeToNodeResolver<TParent>
}

export interface ReportEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLReportTypeResolver<TParent = any> {
  id?: ReportToIdResolver<TParent>
  reporter?: ReportToReporterResolver<TParent>
  target?: ReportToTargetResolver<TParent>
  reason?: ReportToReasonResolver<TParent>
  createdAt?: ReportToCreatedAtResolver<TParent>
}

export interface ReportToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportToReporterResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportToTargetResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportToReasonResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLIcymiTopicConnectionTypeResolver<TParent = any> {
  totalCount?: IcymiTopicConnectionToTotalCountResolver<TParent>
  pageInfo?: IcymiTopicConnectionToPageInfoResolver<TParent>
  edges?: IcymiTopicConnectionToEdgesResolver<TParent>
}

export interface IcymiTopicConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IcymiTopicConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IcymiTopicConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLIcymiTopicEdgeTypeResolver<TParent = any> {
  cursor?: IcymiTopicEdgeToCursorResolver<TParent>
  node?: IcymiTopicEdgeToNodeResolver<TParent>
}

export interface IcymiTopicEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface IcymiTopicEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLExchangeRateTypeResolver<TParent = any> {
  from?: ExchangeRateToFromResolver<TParent>
  to?: ExchangeRateToToResolver<TParent>
  rate?: ExchangeRateToRateResolver<TParent>
  updatedAt?: ExchangeRateToUpdatedAtResolver<TParent>
}

export interface ExchangeRateToFromResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ExchangeRateToToResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ExchangeRateToRateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ExchangeRateToUpdatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLMutationTypeResolver<TParent = any> {
  publishArticle?: MutationToPublishArticleResolver<TParent>
  editArticle?: MutationToEditArticleResolver<TParent>
  toggleSubscribeArticle?: MutationToToggleSubscribeArticleResolver<TParent>
  appreciateArticle?: MutationToAppreciateArticleResolver<TParent>
  readArticle?: MutationToReadArticleResolver<TParent>
  putTopic?: MutationToPutTopicResolver<TParent>
  putChapter?: MutationToPutChapterResolver<TParent>
  deleteTopics?: MutationToDeleteTopicsResolver<TParent>
  sortTopics?: MutationToSortTopicsResolver<TParent>
  toggleFollowTag?: MutationToToggleFollowTagResolver<TParent>
  togglePinTag?: MutationToTogglePinTagResolver<TParent>
  putTag?: MutationToPutTagResolver<TParent>
  updateTagSetting?: MutationToUpdateTagSettingResolver<TParent>
  addArticlesTags?: MutationToAddArticlesTagsResolver<TParent>
  updateArticlesTags?: MutationToUpdateArticlesTagsResolver<TParent>
  deleteArticlesTags?: MutationToDeleteArticlesTagsResolver<TParent>
  toggleArticleRecommend?: MutationToToggleArticleRecommendResolver<TParent>
  updateArticleState?: MutationToUpdateArticleStateResolver<TParent>
  updateArticleSensitive?: MutationToUpdateArticleSensitiveResolver<TParent>
  toggleTagRecommend?: MutationToToggleTagRecommendResolver<TParent>
  deleteTags?: MutationToDeleteTagsResolver<TParent>
  renameTag?: MutationToRenameTagResolver<TParent>
  mergeTags?: MutationToMergeTagsResolver<TParent>
  putCircle?: MutationToPutCircleResolver<TParent>
  toggleFollowCircle?: MutationToToggleFollowCircleResolver<TParent>
  subscribeCircle?: MutationToSubscribeCircleResolver<TParent>
  unsubscribeCircle?: MutationToUnsubscribeCircleResolver<TParent>
  putCircleArticles?: MutationToPutCircleArticlesResolver<TParent>
  invite?: MutationToInviteResolver<TParent>
  putComment?: MutationToPutCommentResolver<TParent>
  deleteComment?: MutationToDeleteCommentResolver<TParent>
  togglePinComment?: MutationToTogglePinCommentResolver<TParent>
  voteComment?: MutationToVoteCommentResolver<TParent>
  unvoteComment?: MutationToUnvoteCommentResolver<TParent>
  updateCommentsState?: MutationToUpdateCommentsStateResolver<TParent>
  pinComment?: MutationToPinCommentResolver<TParent>
  unpinComment?: MutationToUnpinCommentResolver<TParent>
  putDraft?: MutationToPutDraftResolver<TParent>
  deleteDraft?: MutationToDeleteDraftResolver<TParent>
  markAllNoticesAsRead?: MutationToMarkAllNoticesAsReadResolver<TParent>
  singleFileUpload?: MutationToSingleFileUploadResolver<TParent>
  directImageUpload?: MutationToDirectImageUploadResolver<TParent>
  logRecord?: MutationToLogRecordResolver<TParent>
  addBlockedSearchKeyword?: MutationToAddBlockedSearchKeywordResolver<TParent>
  deleteBlockedSearchKeywords?: MutationToDeleteBlockedSearchKeywordsResolver<
    TParent
  >
  submitReport?: MutationToSubmitReportResolver<TParent>
  setBoost?: MutationToSetBoostResolver<TParent>
  putRemark?: MutationToPutRemarkResolver<TParent>
  putSkippedListItem?: MutationToPutSkippedListItemResolver<TParent>
  setFeature?: MutationToSetFeatureResolver<TParent>
  toggleSeedingUsers?: MutationToToggleSeedingUsersResolver<TParent>
  putAnnouncement?: MutationToPutAnnouncementResolver<TParent>
  deleteAnnouncements?: MutationToDeleteAnnouncementsResolver<TParent>
  putRestrictedUsers?: MutationToPutRestrictedUsersResolver<TParent>
  putIcymiTopic?: MutationToPutIcymiTopicResolver<TParent>
  sendVerificationCode?: MutationToSendVerificationCodeResolver<TParent>
  confirmVerificationCode?: MutationToConfirmVerificationCodeResolver<TParent>
  resetPassword?: MutationToResetPasswordResolver<TParent>
  changeEmail?: MutationToChangeEmailResolver<TParent>
  setEmail?: MutationToSetEmailResolver<TParent>
  verifyEmail?: MutationToVerifyEmailResolver<TParent>
  setCurrency?: MutationToSetCurrencyResolver<TParent>
  userRegister?: MutationToUserRegisterResolver<TParent>
  userLogin?: MutationToUserLoginResolver<TParent>
  emailLogin?: MutationToEmailLoginResolver<TParent>
  generateSigningMessage?: MutationToGenerateSigningMessageResolver<TParent>
  walletLogin?: MutationToWalletLoginResolver<TParent>
  addWalletLogin?: MutationToAddWalletLoginResolver<TParent>
  removeWalletLogin?: MutationToRemoveWalletLoginResolver<TParent>
  socialLogin?: MutationToSocialLoginResolver<TParent>
  addSocialLogin?: MutationToAddSocialLoginResolver<TParent>
  removeSocialLogin?: MutationToRemoveSocialLoginResolver<TParent>
  resetWallet?: MutationToResetWalletResolver<TParent>
  userLogout?: MutationToUserLogoutResolver<TParent>
  generateLikerId?: MutationToGenerateLikerIdResolver<TParent>
  resetLikerId?: MutationToResetLikerIdResolver<TParent>
  updateUserInfo?: MutationToUpdateUserInfoResolver<TParent>
  setUserName?: MutationToSetUserNameResolver<TParent>
  setPassword?: MutationToSetPasswordResolver<TParent>
  updateNotificationSetting?: MutationToUpdateNotificationSettingResolver<
    TParent
  >
  toggleFollowUser?: MutationToToggleFollowUserResolver<TParent>
  toggleBlockUser?: MutationToToggleBlockUserResolver<TParent>
  clearReadHistory?: MutationToClearReadHistoryResolver<TParent>
  clearSearchHistory?: MutationToClearSearchHistoryResolver<TParent>
  migration?: MutationToMigrationResolver<TParent>
  claimLogbooks?: MutationToClaimLogbooksResolver<TParent>
  putFeaturedTags?: MutationToPutFeaturedTagsResolver<TParent>
  updateUserState?: MutationToUpdateUserStateResolver<TParent>
  updateUserRole?: MutationToUpdateUserRoleResolver<TParent>
  updateUserExtra?: MutationToUpdateUserExtraResolver<TParent>
  refreshIPNSFeed?: MutationToRefreshIPNSFeedResolver<TParent>
  toggleUsersBadge?: MutationToToggleUsersBadgeResolver<TParent>
  unbindLikerId?: MutationToUnbindLikerIdResolver<TParent>
  addCredit?: MutationToAddCreditResolver<TParent>
  payTo?: MutationToPayToResolver<TParent>
  payout?: MutationToPayoutResolver<TParent>
  connectStripeAccount?: MutationToConnectStripeAccountResolver<TParent>
  putOAuthClient?: MutationToPutOAuthClientResolver<TParent>
  putCollection?: MutationToPutCollectionResolver<TParent>
  deleteCollections?: MutationToDeleteCollectionsResolver<TParent>
  addCollectionsArticles?: MutationToAddCollectionsArticlesResolver<TParent>
  deleteCollectionArticles?: MutationToDeleteCollectionArticlesResolver<TParent>
  reorderCollectionArticles?: MutationToReorderCollectionArticlesResolver<
    TParent
  >
}

export interface MutationToPublishArticleArgs {
  input: GQLPublishArticleInput
}
export interface MutationToPublishArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToPublishArticleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToEditArticleArgs {
  input: GQLEditArticleInput
}
export interface MutationToEditArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToEditArticleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleSubscribeArticleArgs {
  input: GQLToggleItemInput
}
export interface MutationToToggleSubscribeArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleSubscribeArticleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToAppreciateArticleArgs {
  input: GQLAppreciateArticleInput
}
export interface MutationToAppreciateArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAppreciateArticleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToReadArticleArgs {
  input: GQLReadArticleInput
}
export interface MutationToReadArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToReadArticleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutTopicArgs {
  input: GQLPutTopicInput
}
export interface MutationToPutTopicResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutTopicArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutChapterArgs {
  input: GQLPutChapterInput
}
export interface MutationToPutChapterResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutChapterArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteTopicsArgs {
  input: GQLDeleteTopicsInput
}
export interface MutationToDeleteTopicsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteTopicsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSortTopicsArgs {
  input: GQLSortTopicsInput
}
export interface MutationToSortTopicsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToSortTopicsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleFollowTagArgs {
  input: GQLToggleItemInput
}
export interface MutationToToggleFollowTagResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleFollowTagArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToTogglePinTagArgs {
  input: GQLToggleItemInput
}
export interface MutationToTogglePinTagResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToTogglePinTagArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutTagArgs {
  input: GQLPutTagInput
}
export interface MutationToPutTagResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutTagArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateTagSettingArgs {
  input: GQLUpdateTagSettingInput
}
export interface MutationToUpdateTagSettingResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateTagSettingArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToAddArticlesTagsArgs {
  input: GQLAddArticlesTagsInput
}
export interface MutationToAddArticlesTagsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAddArticlesTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateArticlesTagsArgs {
  input: GQLUpdateArticlesTagsInput
}
export interface MutationToUpdateArticlesTagsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateArticlesTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteArticlesTagsArgs {
  input: GQLDeleteArticlesTagsInput
}
export interface MutationToDeleteArticlesTagsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteArticlesTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleArticleRecommendArgs {
  input: GQLToggleRecommendInput
}
export interface MutationToToggleArticleRecommendResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleArticleRecommendArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateArticleStateArgs {
  input: GQLUpdateArticleStateInput
}
export interface MutationToUpdateArticleStateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateArticleStateArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateArticleSensitiveArgs {
  input: GQLUpdateArticleSensitiveInput
}
export interface MutationToUpdateArticleSensitiveResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateArticleSensitiveArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleTagRecommendArgs {
  input: GQLToggleRecommendInput
}
export interface MutationToToggleTagRecommendResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleTagRecommendArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteTagsArgs {
  input: GQLDeleteTagsInput
}
export interface MutationToDeleteTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToRenameTagArgs {
  input: GQLRenameTagInput
}
export interface MutationToRenameTagResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToRenameTagArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMergeTagsArgs {
  input: GQLMergeTagsInput
}
export interface MutationToMergeTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToMergeTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutCircleArgs {
  input: GQLPutCircleInput
}
export interface MutationToPutCircleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutCircleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleFollowCircleArgs {
  input: GQLToggleItemInput
}
export interface MutationToToggleFollowCircleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleFollowCircleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSubscribeCircleArgs {
  input: GQLSubscribeCircleInput
}
export interface MutationToSubscribeCircleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToSubscribeCircleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUnsubscribeCircleArgs {
  input: GQLUnsubscribeCircleInput
}
export interface MutationToUnsubscribeCircleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUnsubscribeCircleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutCircleArticlesArgs {
  input: GQLPutCircleArticlesInput
}
export interface MutationToPutCircleArticlesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToPutCircleArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToInviteArgs {
  input: GQLInviteCircleInput
}
export interface MutationToInviteResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToInviteArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutCommentArgs {
  input: GQLPutCommentInput
}
export interface MutationToPutCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutCommentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteCommentArgs {
  input: GQLDeleteCommentInput
}
export interface MutationToDeleteCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteCommentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToTogglePinCommentArgs {
  input: GQLToggleItemInput
}
export interface MutationToTogglePinCommentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToTogglePinCommentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToVoteCommentArgs {
  input: GQLVoteCommentInput
}
export interface MutationToVoteCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToVoteCommentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUnvoteCommentArgs {
  input: GQLUnvoteCommentInput
}
export interface MutationToUnvoteCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUnvoteCommentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateCommentsStateArgs {
  input: GQLUpdateCommentsStateInput
}
export interface MutationToUpdateCommentsStateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateCommentsStateArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPinCommentArgs {
  input: GQLPinCommentInput
}
export interface MutationToPinCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPinCommentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUnpinCommentArgs {
  input: GQLUnpinCommentInput
}
export interface MutationToUnpinCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUnpinCommentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutDraftArgs {
  input: GQLPutDraftInput
}
export interface MutationToPutDraftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutDraftArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteDraftArgs {
  input: GQLDeleteDraftInput
}
export interface MutationToDeleteDraftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteDraftArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkAllNoticesAsReadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSingleFileUploadArgs {
  input: GQLSingleFileUploadInput
}
export interface MutationToSingleFileUploadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToSingleFileUploadArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDirectImageUploadArgs {
  input: GQLDirectImageUploadInput
}
export interface MutationToDirectImageUploadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDirectImageUploadArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToLogRecordArgs {
  input: GQLLogRecordInput
}
export interface MutationToLogRecordResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToLogRecordArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToAddBlockedSearchKeywordArgs {
  input: GQLKeywordInput
}
export interface MutationToAddBlockedSearchKeywordResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAddBlockedSearchKeywordArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteBlockedSearchKeywordsArgs {
  input: GQLKeywordsInput
}
export interface MutationToDeleteBlockedSearchKeywordsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteBlockedSearchKeywordsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSubmitReportArgs {
  input: GQLSubmitReportInput
}
export interface MutationToSubmitReportResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToSubmitReportArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSetBoostArgs {
  input: GQLSetBoostInput
}
export interface MutationToSetBoostResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToSetBoostArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutRemarkArgs {
  input: GQLPutRemarkInput
}
export interface MutationToPutRemarkResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutRemarkArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutSkippedListItemArgs {
  input: GQLPutSkippedListItemInput
}
export interface MutationToPutSkippedListItemResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToPutSkippedListItemArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSetFeatureArgs {
  input: GQLSetFeatureInput
}
export interface MutationToSetFeatureResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToSetFeatureArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleSeedingUsersArgs {
  input: GQLToggleSeedingUsersInput
}
export interface MutationToToggleSeedingUsersResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleSeedingUsersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutAnnouncementArgs {
  input: GQLPutAnnouncementInput
}
export interface MutationToPutAnnouncementResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToPutAnnouncementArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteAnnouncementsArgs {
  input: GQLDeleteAnnouncementsInput
}
export interface MutationToDeleteAnnouncementsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteAnnouncementsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutRestrictedUsersArgs {
  input: GQLPutRestrictedUsersInput
}
export interface MutationToPutRestrictedUsersResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToPutRestrictedUsersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutIcymiTopicArgs {
  input: GQLPutIcymiTopicInput
}
export interface MutationToPutIcymiTopicResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutIcymiTopicArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSendVerificationCodeArgs {
  input: GQLSendVerificationCodeInput
}
export interface MutationToSendVerificationCodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToSendVerificationCodeArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToConfirmVerificationCodeArgs {
  input: GQLConfirmVerificationCodeInput
}
export interface MutationToConfirmVerificationCodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToConfirmVerificationCodeArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToResetPasswordArgs {
  input: GQLResetPasswordInput
}
export interface MutationToResetPasswordResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToResetPasswordArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToChangeEmailArgs {
  input: GQLChangeEmailInput
}
export interface MutationToChangeEmailResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToChangeEmailArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSetEmailArgs {
  input: GQLSetEmailInput
}
export interface MutationToSetEmailResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToSetEmailArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToVerifyEmailArgs {
  input: GQLVerifyEmailInput
}
export interface MutationToVerifyEmailResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToVerifyEmailArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSetCurrencyArgs {
  input: GQLSetCurrencyInput
}
export interface MutationToSetCurrencyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToSetCurrencyArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUserRegisterArgs {
  input: GQLUserRegisterInput
}
export interface MutationToUserRegisterResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUserRegisterArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUserLoginArgs {
  input: GQLUserLoginInput
}
export interface MutationToUserLoginResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUserLoginArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToEmailLoginArgs {
  input: GQLEmailLoginInput
}
export interface MutationToEmailLoginResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToEmailLoginArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToGenerateSigningMessageArgs {
  input: GQLGenerateSigningMessageInput
}
export interface MutationToGenerateSigningMessageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToGenerateSigningMessageArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToWalletLoginArgs {
  input: GQLWalletLoginInput
}
export interface MutationToWalletLoginResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToWalletLoginArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToAddWalletLoginArgs {
  input: GQLWalletLoginInput
}
export interface MutationToAddWalletLoginResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAddWalletLoginArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToRemoveWalletLoginResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSocialLoginArgs {
  input: GQLSocialLoginInput
}
export interface MutationToSocialLoginResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToSocialLoginArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToAddSocialLoginArgs {
  input: GQLSocialLoginInput
}
export interface MutationToAddSocialLoginResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAddSocialLoginArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToRemoveSocialLoginArgs {
  input: GQLRemoveSocialLoginInput
}
export interface MutationToRemoveSocialLoginResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToRemoveSocialLoginArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToResetWalletArgs {
  input: GQLResetWalletInput
}
export interface MutationToResetWalletResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToResetWalletArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUserLogoutResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToGenerateLikerIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToResetLikerIdArgs {
  input: GQLResetLikerIdInput
}
export interface MutationToResetLikerIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToResetLikerIdArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateUserInfoArgs {
  input: GQLUpdateUserInfoInput
}
export interface MutationToUpdateUserInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateUserInfoArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSetUserNameArgs {
  input: GQLSetUserNameInput
}
export interface MutationToSetUserNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToSetUserNameArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSetPasswordArgs {
  input: GQLSetPasswordInput
}
export interface MutationToSetPasswordResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToSetPasswordArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateNotificationSettingArgs {
  input: GQLUpdateNotificationSettingInput
}
export interface MutationToUpdateNotificationSettingResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateNotificationSettingArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleFollowUserArgs {
  input: GQLToggleItemInput
}
export interface MutationToToggleFollowUserResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleFollowUserArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleBlockUserArgs {
  input: GQLToggleItemInput
}
export interface MutationToToggleBlockUserResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleBlockUserArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToClearReadHistoryArgs {
  input: GQLClearReadHistoryInput
}
export interface MutationToClearReadHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToClearReadHistoryArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToClearSearchHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMigrationArgs {
  input: GQLMigrationInput
}
export interface MutationToMigrationResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToMigrationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToClaimLogbooksArgs {
  input: GQLClaimLogbooksInput
}
export interface MutationToClaimLogbooksResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToClaimLogbooksArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutFeaturedTagsArgs {
  input: GQLFeaturedTagsInput
}
export interface MutationToPutFeaturedTagsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToPutFeaturedTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateUserStateArgs {
  input: GQLUpdateUserStateInput
}
export interface MutationToUpdateUserStateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateUserStateArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateUserRoleArgs {
  input: GQLUpdateUserRoleInput
}
export interface MutationToUpdateUserRoleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateUserRoleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateUserExtraArgs {
  input: GQLUpdateUserExtraInput
}
export interface MutationToUpdateUserExtraResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateUserExtraArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToRefreshIPNSFeedArgs {
  input: GQLRefreshIPNSFeedInput
}
export interface MutationToRefreshIPNSFeedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToRefreshIPNSFeedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleUsersBadgeArgs {
  input: GQLToggleUsersBadgeInput
}
export interface MutationToToggleUsersBadgeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleUsersBadgeArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUnbindLikerIdArgs {
  input: GQLUnbindLikerIdInput
}
export interface MutationToUnbindLikerIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUnbindLikerIdArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToAddCreditArgs {
  input: GQLAddCreditInput
}
export interface MutationToAddCreditResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToAddCreditArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPayToArgs {
  input: GQLPayToInput
}
export interface MutationToPayToResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPayToArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPayoutArgs {
  input: GQLPayoutInput
}
export interface MutationToPayoutResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPayoutArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToConnectStripeAccountArgs {
  input: GQLConnectStripeAccountInput
}
export interface MutationToConnectStripeAccountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToConnectStripeAccountArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutOAuthClientArgs {
  input: GQLPutOAuthClientInput
}
export interface MutationToPutOAuthClientResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToPutOAuthClientArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutCollectionArgs {
  input: GQLPutCollectionInput
}
export interface MutationToPutCollectionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutCollectionArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteCollectionsArgs {
  input: GQLDeleteCollectionsInput
}
export interface MutationToDeleteCollectionsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteCollectionsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToAddCollectionsArticlesArgs {
  input: GQLAddCollectionsArticlesInput
}
export interface MutationToAddCollectionsArticlesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAddCollectionsArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteCollectionArticlesArgs {
  input: GQLDeleteCollectionArticlesInput
}
export interface MutationToDeleteCollectionArticlesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteCollectionArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToReorderCollectionArticlesArgs {
  input: GQLReorderCollectionArticlesInput
}
export interface MutationToReorderCollectionArticlesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToReorderCollectionArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSubscribeCircleResultTypeResolver<TParent = any> {
  circle?: SubscribeCircleResultToCircleResolver<TParent>
  client_secret?: SubscribeCircleResultToClient_secretResolver<TParent>
}

export interface SubscribeCircleResultToCircleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SubscribeCircleResultToClient_secretResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLBlockedSearchKeywordTypeResolver<TParent = any> {
  id?: BlockedSearchKeywordToIdResolver<TParent>
  searchKey?: BlockedSearchKeywordToSearchKeyResolver<TParent>
  createdAt?: BlockedSearchKeywordToCreatedAtResolver<TParent>
}

export interface BlockedSearchKeywordToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BlockedSearchKeywordToSearchKeyResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface BlockedSearchKeywordToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAuthResultTypeResolver<TParent = any> {
  auth?: AuthResultToAuthResolver<TParent>
  token?: AuthResultToTokenResolver<TParent>
  type?: AuthResultToTypeResolver<TParent>
  user?: AuthResultToUserResolver<TParent>
}

export interface AuthResultToAuthResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AuthResultToTokenResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AuthResultToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AuthResultToUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSigningMessageResultTypeResolver<TParent = any> {
  nonce?: SigningMessageResultToNonceResolver<TParent>
  purpose?: SigningMessageResultToPurposeResolver<TParent>
  signingMessage?: SigningMessageResultToSigningMessageResolver<TParent>
  createdAt?: SigningMessageResultToCreatedAtResolver<TParent>
  expiredAt?: SigningMessageResultToExpiredAtResolver<TParent>
}

export interface SigningMessageResultToNonceResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SigningMessageResultToPurposeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SigningMessageResultToSigningMessageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SigningMessageResultToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SigningMessageResultToExpiredAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLClaimLogbooksResultTypeResolver<TParent = any> {
  ids?: ClaimLogbooksResultToIdsResolver<TParent>
  txHash?: ClaimLogbooksResultToTxHashResolver<TParent>
}

export interface ClaimLogbooksResultToIdsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ClaimLogbooksResultToTxHashResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAddCreditResultTypeResolver<TParent = any> {
  transaction?: AddCreditResultToTransactionResolver<TParent>
  client_secret?: AddCreditResultToClient_secretResolver<TParent>
}

export interface AddCreditResultToTransactionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddCreditResultToClient_secretResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLPayToResultTypeResolver<TParent = any> {
  transaction?: PayToResultToTransactionResolver<TParent>
  redirectUrl?: PayToResultToRedirectUrlResolver<TParent>
}

export interface PayToResultToTransactionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PayToResultToRedirectUrlResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLConnectStripeAccountResultTypeResolver<TParent = any> {
  redirectUrl?: ConnectStripeAccountResultToRedirectUrlResolver<TParent>
}

export interface ConnectStripeAccountResultToRedirectUrlResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleArticleNoticeTypeResolver<TParent = any> {
  id?: ArticleArticleNoticeToIdResolver<TParent>
  unread?: ArticleArticleNoticeToUnreadResolver<TParent>
  createdAt?: ArticleArticleNoticeToCreatedAtResolver<TParent>
  actors?: ArticleArticleNoticeToActorsResolver<TParent>
  type?: ArticleArticleNoticeToTypeResolver<TParent>
  target?: ArticleArticleNoticeToTargetResolver<TParent>
  article?: ArticleArticleNoticeToArticleResolver<TParent>
}

export interface ArticleArticleNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleArticleNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleArticleNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleArticleNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleArticleNoticeToTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleArticleNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleArticleNoticeToArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleNoticeTypeResolver<TParent = any> {
  id?: ArticleNoticeToIdResolver<TParent>
  unread?: ArticleNoticeToUnreadResolver<TParent>
  createdAt?: ArticleNoticeToCreatedAtResolver<TParent>
  actors?: ArticleNoticeToActorsResolver<TParent>
  type?: ArticleNoticeToTypeResolver<TParent>
  target?: ArticleNoticeToTargetResolver<TParent>
}

export interface ArticleNoticeToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNoticeToUnreadResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNoticeToActorsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNoticeToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNoticeToTargetResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCircleNoticeTypeResolver<TParent = any> {
  id?: CircleNoticeToIdResolver<TParent>
  unread?: CircleNoticeToUnreadResolver<TParent>
  createdAt?: CircleNoticeToCreatedAtResolver<TParent>
  actors?: CircleNoticeToActorsResolver<TParent>
  type?: CircleNoticeToTypeResolver<TParent>
  target?: CircleNoticeToTargetResolver<TParent>
  comments?: CircleNoticeToCommentsResolver<TParent>
  replies?: CircleNoticeToRepliesResolver<TParent>
  mentions?: CircleNoticeToMentionsResolver<TParent>
}

export interface CircleNoticeToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleNoticeToUnreadResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleNoticeToActorsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleNoticeToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleNoticeToTargetResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleNoticeToCommentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleNoticeToRepliesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CircleNoticeToMentionsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCommentCommentNoticeTypeResolver<TParent = any> {
  id?: CommentCommentNoticeToIdResolver<TParent>
  unread?: CommentCommentNoticeToUnreadResolver<TParent>
  createdAt?: CommentCommentNoticeToCreatedAtResolver<TParent>
  actors?: CommentCommentNoticeToActorsResolver<TParent>
  type?: CommentCommentNoticeToTypeResolver<TParent>
  target?: CommentCommentNoticeToTargetResolver<TParent>
  comment?: CommentCommentNoticeToCommentResolver<TParent>
}

export interface CommentCommentNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentCommentNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentCommentNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentCommentNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentCommentNoticeToTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentCommentNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentCommentNoticeToCommentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCommentNoticeTypeResolver<TParent = any> {
  id?: CommentNoticeToIdResolver<TParent>
  unread?: CommentNoticeToUnreadResolver<TParent>
  createdAt?: CommentNoticeToCreatedAtResolver<TParent>
  actors?: CommentNoticeToActorsResolver<TParent>
  type?: CommentNoticeToTypeResolver<TParent>
  target?: CommentNoticeToTargetResolver<TParent>
}

export interface CommentNoticeToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentNoticeToUnreadResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentNoticeToActorsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentNoticeToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentNoticeToTargetResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLOfficialAnnouncementNoticeTypeResolver<TParent = any> {
  id?: OfficialAnnouncementNoticeToIdResolver<TParent>
  unread?: OfficialAnnouncementNoticeToUnreadResolver<TParent>
  createdAt?: OfficialAnnouncementNoticeToCreatedAtResolver<TParent>
  message?: OfficialAnnouncementNoticeToMessageResolver<TParent>
  link?: OfficialAnnouncementNoticeToLinkResolver<TParent>
}

export interface OfficialAnnouncementNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialAnnouncementNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialAnnouncementNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialAnnouncementNoticeToMessageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialAnnouncementNoticeToLinkResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTransactionNoticeTypeResolver<TParent = any> {
  id?: TransactionNoticeToIdResolver<TParent>
  unread?: TransactionNoticeToUnreadResolver<TParent>
  createdAt?: TransactionNoticeToCreatedAtResolver<TParent>
  actors?: TransactionNoticeToActorsResolver<TParent>
  type?: TransactionNoticeToTypeResolver<TParent>
  target?: TransactionNoticeToTargetResolver<TParent>
}

export interface TransactionNoticeToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionNoticeToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserNoticeTypeResolver<TParent = any> {
  id?: UserNoticeToIdResolver<TParent>
  unread?: UserNoticeToUnreadResolver<TParent>
  createdAt?: UserNoticeToCreatedAtResolver<TParent>
  actors?: UserNoticeToActorsResolver<TParent>
  type?: UserNoticeToTypeResolver<TParent>
  target?: UserNoticeToTargetResolver<TParent>
}

export interface UserNoticeToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserNoticeToUnreadResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserNoticeToActorsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserNoticeToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserNoticeToTargetResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}
